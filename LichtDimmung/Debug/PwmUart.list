
PwmUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002854  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002964  08002964  00012964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080029ec  080029ec  000129ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080029f0  080029f0  000129f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000d0  20000000  080029f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000e7c  200000d0  08002ac4  000200d0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000f4c  08002ac4  00020f4c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00019b54  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003562  00000000  00000000  00039c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008eea  00000000  00000000  0003d1af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d18  00000000  00000000  000460a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000010b8  00000000  00000000  00046db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006e1f  00000000  00000000  00047e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004f47  00000000  00000000  0004ec8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00053bd6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000025f4  00000000  00000000  00053c54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000d0 	.word	0x200000d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800294c 	.word	0x0800294c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000d4 	.word	0x200000d4
 800014c:	0800294c 	.word	0x0800294c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000160:	4a07      	ldr	r2, [pc, #28]	; (8000180 <HAL_Init+0x20>)
{
 8000162:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000164:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000166:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000168:	f043 0310 	orr.w	r3, r3, #16
 800016c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800016e:	f000 f817 	bl	80001a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000172:	2000      	movs	r0, #0
 8000174:	f002 fb30 	bl	80027d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000178:	f002 fa94 	bl	80026a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800017c:	2000      	movs	r0, #0
 800017e:	bd08      	pop	{r3, pc}
 8000180:	40022000 	.word	0x40022000

08000184 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000184:	4a02      	ldr	r2, [pc, #8]	; (8000190 <HAL_IncTick+0xc>)
 8000186:	6813      	ldr	r3, [r2, #0]
 8000188:	3301      	adds	r3, #1
 800018a:	6013      	str	r3, [r2, #0]
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	20000e50 	.word	0x20000e50

08000194 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000194:	4b01      	ldr	r3, [pc, #4]	; (800019c <HAL_GetTick+0x8>)
 8000196:	6818      	ldr	r0, [r3, #0]
}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	20000e50 	.word	0x20000e50

080001a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001a0:	4a07      	ldr	r2, [pc, #28]	; (80001c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001a2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001a4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001a6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001ae:	041b      	lsls	r3, r3, #16
 80001b0:	0c1b      	lsrs	r3, r3, #16
 80001b2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001ba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001bc:	60d3      	str	r3, [r2, #12]
 80001be:	4770      	bx	lr
 80001c0:	e000ed00 	.word	0xe000ed00

080001c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001c4:	4b17      	ldr	r3, [pc, #92]	; (8000224 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80001c6:	b530      	push	{r4, r5, lr}
 80001c8:	68dc      	ldr	r4, [r3, #12]
 80001ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001ce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001d2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001d4:	2b04      	cmp	r3, #4
 80001d6:	bf28      	it	cs
 80001d8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001da:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001dc:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001e0:	bf98      	it	ls
 80001e2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001e4:	fa05 f303 	lsl.w	r3, r5, r3
 80001e8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001ec:	bf88      	it	hi
 80001ee:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001f0:	4019      	ands	r1, r3
 80001f2:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80001f4:	fa05 f404 	lsl.w	r4, r5, r4
 80001f8:	3c01      	subs	r4, #1
 80001fa:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80001fc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001fe:	ea42 0201 	orr.w	r2, r2, r1
 8000202:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000206:	bfaf      	iteee	ge
 8000208:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800020c:	4b06      	ldrlt	r3, [pc, #24]	; (8000228 <HAL_NVIC_SetPriority+0x64>)
 800020e:	f000 000f 	andlt.w	r0, r0, #15
 8000212:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000214:	bfa5      	ittet	ge
 8000216:	b2d2      	uxtbge	r2, r2
 8000218:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800021c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800021e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000222:	bd30      	pop	{r4, r5, pc}
 8000224:	e000ed00 	.word	0xe000ed00
 8000228:	e000ed14 	.word	0xe000ed14

0800022c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800022c:	2301      	movs	r3, #1
 800022e:	0942      	lsrs	r2, r0, #5
 8000230:	f000 001f 	and.w	r0, r0, #31
 8000234:	fa03 f000 	lsl.w	r0, r3, r0
 8000238:	4b01      	ldr	r3, [pc, #4]	; (8000240 <HAL_NVIC_EnableIRQ+0x14>)
 800023a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800023e:	4770      	bx	lr
 8000240:	e000e100 	.word	0xe000e100

08000244 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000244:	3801      	subs	r0, #1
 8000246:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800024a:	d20a      	bcs.n	8000262 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800024e:	4b06      	ldr	r3, [pc, #24]	; (8000268 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	4a06      	ldr	r2, [pc, #24]	; (800026c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000252:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000254:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000258:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800025a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800025c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000262:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	e000e010 	.word	0xe000e010
 800026c:	e000ed00 	.word	0xe000ed00

08000270 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000270:	4b04      	ldr	r3, [pc, #16]	; (8000284 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000272:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	bf0c      	ite	eq
 8000278:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800027c:	f022 0204 	bicne.w	r2, r2, #4
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	4770      	bx	lr
 8000284:	e000e010 	.word	0xe000e010

08000288 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800028c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800028e:	4616      	mov	r6, r2
 8000290:	4b65      	ldr	r3, [pc, #404]	; (8000428 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000292:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000438 <HAL_GPIO_Init+0x1b0>
 8000296:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800043c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800029a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800029e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002a0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002a4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002a8:	45a0      	cmp	r8, r4
 80002aa:	d17f      	bne.n	80003ac <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002ac:	684d      	ldr	r5, [r1, #4]
 80002ae:	2d12      	cmp	r5, #18
 80002b0:	f000 80af 	beq.w	8000412 <HAL_GPIO_Init+0x18a>
 80002b4:	f200 8088 	bhi.w	80003c8 <HAL_GPIO_Init+0x140>
 80002b8:	2d02      	cmp	r5, #2
 80002ba:	f000 80a7 	beq.w	800040c <HAL_GPIO_Init+0x184>
 80002be:	d87c      	bhi.n	80003ba <HAL_GPIO_Init+0x132>
 80002c0:	2d00      	cmp	r5, #0
 80002c2:	f000 808e 	beq.w	80003e2 <HAL_GPIO_Init+0x15a>
 80002c6:	2d01      	cmp	r5, #1
 80002c8:	f000 809e 	beq.w	8000408 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80002cc:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002d0:	2cff      	cmp	r4, #255	; 0xff
 80002d2:	bf93      	iteet	ls
 80002d4:	4682      	movls	sl, r0
 80002d6:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80002da:	3d08      	subhi	r5, #8
 80002dc:	f8d0 b000 	ldrls.w	fp, [r0]
 80002e0:	bf92      	itee	ls
 80002e2:	00b5      	lslls	r5, r6, #2
 80002e4:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80002e8:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80002ea:	fa09 f805 	lsl.w	r8, r9, r5
 80002ee:	ea2b 0808 	bic.w	r8, fp, r8
 80002f2:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002f6:	bf88      	it	hi
 80002f8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80002fc:	ea48 0505 	orr.w	r5, r8, r5
 8000300:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000304:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000308:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800030c:	d04e      	beq.n	80003ac <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800030e:	4d47      	ldr	r5, [pc, #284]	; (800042c <HAL_GPIO_Init+0x1a4>)
 8000310:	4f46      	ldr	r7, [pc, #280]	; (800042c <HAL_GPIO_Init+0x1a4>)
 8000312:	69ad      	ldr	r5, [r5, #24]
 8000314:	f026 0803 	bic.w	r8, r6, #3
 8000318:	f045 0501 	orr.w	r5, r5, #1
 800031c:	61bd      	str	r5, [r7, #24]
 800031e:	69bd      	ldr	r5, [r7, #24]
 8000320:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000324:	f005 0501 	and.w	r5, r5, #1
 8000328:	9501      	str	r5, [sp, #4]
 800032a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800032e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000332:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000334:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000338:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800033c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000340:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000344:	4d3a      	ldr	r5, [pc, #232]	; (8000430 <HAL_GPIO_Init+0x1a8>)
 8000346:	42a8      	cmp	r0, r5
 8000348:	d068      	beq.n	800041c <HAL_GPIO_Init+0x194>
 800034a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800034e:	42a8      	cmp	r0, r5
 8000350:	d066      	beq.n	8000420 <HAL_GPIO_Init+0x198>
 8000352:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000356:	42a8      	cmp	r0, r5
 8000358:	d064      	beq.n	8000424 <HAL_GPIO_Init+0x19c>
 800035a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800035e:	42a8      	cmp	r0, r5
 8000360:	bf0c      	ite	eq
 8000362:	2503      	moveq	r5, #3
 8000364:	2504      	movne	r5, #4
 8000366:	fa05 f50b 	lsl.w	r5, r5, fp
 800036a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800036e:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000372:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000374:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 8000378:	bf14      	ite	ne
 800037a:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800037c:	43a5      	biceq	r5, r4
 800037e:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000380:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000382:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 8000386:	bf14      	ite	ne
 8000388:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 800038a:	43a5      	biceq	r5, r4
 800038c:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800038e:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000390:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000394:	bf14      	ite	ne
 8000396:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000398:	43a5      	biceq	r5, r4
 800039a:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 800039c:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800039e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 80003a2:	bf14      	ite	ne
 80003a4:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80003a6:	ea25 0404 	biceq.w	r4, r5, r4
 80003aa:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003ac:	3601      	adds	r6, #1
 80003ae:	2e10      	cmp	r6, #16
 80003b0:	f47f af73 	bne.w	800029a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003b4:	b003      	add	sp, #12
 80003b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003ba:	2d03      	cmp	r5, #3
 80003bc:	d022      	beq.n	8000404 <HAL_GPIO_Init+0x17c>
 80003be:	2d11      	cmp	r5, #17
 80003c0:	d184      	bne.n	80002cc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003c2:	68ca      	ldr	r2, [r1, #12]
 80003c4:	3204      	adds	r2, #4
          break;
 80003c6:	e781      	b.n	80002cc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003c8:	4f1a      	ldr	r7, [pc, #104]	; (8000434 <HAL_GPIO_Init+0x1ac>)
 80003ca:	42bd      	cmp	r5, r7
 80003cc:	d009      	beq.n	80003e2 <HAL_GPIO_Init+0x15a>
 80003ce:	d812      	bhi.n	80003f6 <HAL_GPIO_Init+0x16e>
 80003d0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000440 <HAL_GPIO_Init+0x1b8>
 80003d4:	454d      	cmp	r5, r9
 80003d6:	d004      	beq.n	80003e2 <HAL_GPIO_Init+0x15a>
 80003d8:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80003dc:	454d      	cmp	r5, r9
 80003de:	f47f af75 	bne.w	80002cc <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80003e2:	688a      	ldr	r2, [r1, #8]
 80003e4:	b1c2      	cbz	r2, 8000418 <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80003e6:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80003e8:	bf0c      	ite	eq
 80003ea:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80003ee:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80003f2:	2208      	movs	r2, #8
 80003f4:	e76a      	b.n	80002cc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003f6:	4575      	cmp	r5, lr
 80003f8:	d0f3      	beq.n	80003e2 <HAL_GPIO_Init+0x15a>
 80003fa:	4565      	cmp	r5, ip
 80003fc:	d0f1      	beq.n	80003e2 <HAL_GPIO_Init+0x15a>
 80003fe:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000444 <HAL_GPIO_Init+0x1bc>
 8000402:	e7eb      	b.n	80003dc <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000404:	2200      	movs	r2, #0
 8000406:	e761      	b.n	80002cc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000408:	68ca      	ldr	r2, [r1, #12]
          break;
 800040a:	e75f      	b.n	80002cc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800040c:	68ca      	ldr	r2, [r1, #12]
 800040e:	3208      	adds	r2, #8
          break;
 8000410:	e75c      	b.n	80002cc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000412:	68ca      	ldr	r2, [r1, #12]
 8000414:	320c      	adds	r2, #12
          break;
 8000416:	e759      	b.n	80002cc <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000418:	2204      	movs	r2, #4
 800041a:	e757      	b.n	80002cc <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800041c:	2500      	movs	r5, #0
 800041e:	e7a2      	b.n	8000366 <HAL_GPIO_Init+0xde>
 8000420:	2501      	movs	r5, #1
 8000422:	e7a0      	b.n	8000366 <HAL_GPIO_Init+0xde>
 8000424:	2502      	movs	r5, #2
 8000426:	e79e      	b.n	8000366 <HAL_GPIO_Init+0xde>
 8000428:	40010400 	.word	0x40010400
 800042c:	40021000 	.word	0x40021000
 8000430:	40010800 	.word	0x40010800
 8000434:	10210000 	.word	0x10210000
 8000438:	10310000 	.word	0x10310000
 800043c:	10320000 	.word	0x10320000
 8000440:	10110000 	.word	0x10110000
 8000444:	10220000 	.word	0x10220000

08000448 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000448:	b10a      	cbz	r2, 800044e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800044a:	6101      	str	r1, [r0, #16]
 800044c:	4770      	bx	lr
 800044e:	0409      	lsls	r1, r1, #16
 8000450:	e7fb      	b.n	800044a <HAL_GPIO_WritePin+0x2>

08000452 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000452:	68c3      	ldr	r3, [r0, #12]
 8000454:	4059      	eors	r1, r3
 8000456:	60c1      	str	r1, [r0, #12]
 8000458:	4770      	bx	lr
	...

0800045c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800045c:	6803      	ldr	r3, [r0, #0]
{
 800045e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000462:	07db      	lsls	r3, r3, #31
{
 8000464:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000466:	d410      	bmi.n	800048a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000468:	682b      	ldr	r3, [r5, #0]
 800046a:	079f      	lsls	r7, r3, #30
 800046c:	d45e      	bmi.n	800052c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800046e:	682b      	ldr	r3, [r5, #0]
 8000470:	0719      	lsls	r1, r3, #28
 8000472:	f100 8095 	bmi.w	80005a0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000476:	682b      	ldr	r3, [r5, #0]
 8000478:	075a      	lsls	r2, r3, #29
 800047a:	f100 80bf 	bmi.w	80005fc <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800047e:	69ea      	ldr	r2, [r5, #28]
 8000480:	2a00      	cmp	r2, #0
 8000482:	f040 812d 	bne.w	80006e0 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000486:	2000      	movs	r0, #0
 8000488:	e014      	b.n	80004b4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800048a:	4c90      	ldr	r4, [pc, #576]	; (80006cc <HAL_RCC_OscConfig+0x270>)
 800048c:	6863      	ldr	r3, [r4, #4]
 800048e:	f003 030c 	and.w	r3, r3, #12
 8000492:	2b04      	cmp	r3, #4
 8000494:	d007      	beq.n	80004a6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000496:	6863      	ldr	r3, [r4, #4]
 8000498:	f003 030c 	and.w	r3, r3, #12
 800049c:	2b08      	cmp	r3, #8
 800049e:	d10c      	bne.n	80004ba <HAL_RCC_OscConfig+0x5e>
 80004a0:	6863      	ldr	r3, [r4, #4]
 80004a2:	03de      	lsls	r6, r3, #15
 80004a4:	d509      	bpl.n	80004ba <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004a6:	6823      	ldr	r3, [r4, #0]
 80004a8:	039c      	lsls	r4, r3, #14
 80004aa:	d5dd      	bpl.n	8000468 <HAL_RCC_OscConfig+0xc>
 80004ac:	686b      	ldr	r3, [r5, #4]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1da      	bne.n	8000468 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004b2:	2001      	movs	r0, #1
}
 80004b4:	b002      	add	sp, #8
 80004b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004ba:	686b      	ldr	r3, [r5, #4]
 80004bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004c0:	d110      	bne.n	80004e4 <HAL_RCC_OscConfig+0x88>
 80004c2:	6823      	ldr	r3, [r4, #0]
 80004c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004c8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004ca:	f7ff fe63 	bl	8000194 <HAL_GetTick>
 80004ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80004d0:	6823      	ldr	r3, [r4, #0]
 80004d2:	0398      	lsls	r0, r3, #14
 80004d4:	d4c8      	bmi.n	8000468 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80004d6:	f7ff fe5d 	bl	8000194 <HAL_GetTick>
 80004da:	1b80      	subs	r0, r0, r6
 80004dc:	2864      	cmp	r0, #100	; 0x64
 80004de:	d9f7      	bls.n	80004d0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80004e0:	2003      	movs	r0, #3
 80004e2:	e7e7      	b.n	80004b4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004e4:	b99b      	cbnz	r3, 800050e <HAL_RCC_OscConfig+0xb2>
 80004e6:	6823      	ldr	r3, [r4, #0]
 80004e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004ec:	6023      	str	r3, [r4, #0]
 80004ee:	6823      	ldr	r3, [r4, #0]
 80004f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004f4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004f6:	f7ff fe4d 	bl	8000194 <HAL_GetTick>
 80004fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80004fc:	6823      	ldr	r3, [r4, #0]
 80004fe:	0399      	lsls	r1, r3, #14
 8000500:	d5b2      	bpl.n	8000468 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000502:	f7ff fe47 	bl	8000194 <HAL_GetTick>
 8000506:	1b80      	subs	r0, r0, r6
 8000508:	2864      	cmp	r0, #100	; 0x64
 800050a:	d9f7      	bls.n	80004fc <HAL_RCC_OscConfig+0xa0>
 800050c:	e7e8      	b.n	80004e0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800050e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000512:	6823      	ldr	r3, [r4, #0]
 8000514:	d103      	bne.n	800051e <HAL_RCC_OscConfig+0xc2>
 8000516:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800051a:	6023      	str	r3, [r4, #0]
 800051c:	e7d1      	b.n	80004c2 <HAL_RCC_OscConfig+0x66>
 800051e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000522:	6023      	str	r3, [r4, #0]
 8000524:	6823      	ldr	r3, [r4, #0]
 8000526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800052a:	e7cd      	b.n	80004c8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800052c:	4c67      	ldr	r4, [pc, #412]	; (80006cc <HAL_RCC_OscConfig+0x270>)
 800052e:	6863      	ldr	r3, [r4, #4]
 8000530:	f013 0f0c 	tst.w	r3, #12
 8000534:	d007      	beq.n	8000546 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000536:	6863      	ldr	r3, [r4, #4]
 8000538:	f003 030c 	and.w	r3, r3, #12
 800053c:	2b08      	cmp	r3, #8
 800053e:	d110      	bne.n	8000562 <HAL_RCC_OscConfig+0x106>
 8000540:	6863      	ldr	r3, [r4, #4]
 8000542:	03da      	lsls	r2, r3, #15
 8000544:	d40d      	bmi.n	8000562 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000546:	6823      	ldr	r3, [r4, #0]
 8000548:	079b      	lsls	r3, r3, #30
 800054a:	d502      	bpl.n	8000552 <HAL_RCC_OscConfig+0xf6>
 800054c:	692b      	ldr	r3, [r5, #16]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d1af      	bne.n	80004b2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000552:	6823      	ldr	r3, [r4, #0]
 8000554:	696a      	ldr	r2, [r5, #20]
 8000556:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800055a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800055e:	6023      	str	r3, [r4, #0]
 8000560:	e785      	b.n	800046e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000562:	692a      	ldr	r2, [r5, #16]
 8000564:	4b5a      	ldr	r3, [pc, #360]	; (80006d0 <HAL_RCC_OscConfig+0x274>)
 8000566:	b16a      	cbz	r2, 8000584 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000568:	2201      	movs	r2, #1
 800056a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800056c:	f7ff fe12 	bl	8000194 <HAL_GetTick>
 8000570:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000572:	6823      	ldr	r3, [r4, #0]
 8000574:	079f      	lsls	r7, r3, #30
 8000576:	d4ec      	bmi.n	8000552 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000578:	f7ff fe0c 	bl	8000194 <HAL_GetTick>
 800057c:	1b80      	subs	r0, r0, r6
 800057e:	2802      	cmp	r0, #2
 8000580:	d9f7      	bls.n	8000572 <HAL_RCC_OscConfig+0x116>
 8000582:	e7ad      	b.n	80004e0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000584:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000586:	f7ff fe05 	bl	8000194 <HAL_GetTick>
 800058a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800058c:	6823      	ldr	r3, [r4, #0]
 800058e:	0798      	lsls	r0, r3, #30
 8000590:	f57f af6d 	bpl.w	800046e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000594:	f7ff fdfe 	bl	8000194 <HAL_GetTick>
 8000598:	1b80      	subs	r0, r0, r6
 800059a:	2802      	cmp	r0, #2
 800059c:	d9f6      	bls.n	800058c <HAL_RCC_OscConfig+0x130>
 800059e:	e79f      	b.n	80004e0 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005a0:	69aa      	ldr	r2, [r5, #24]
 80005a2:	4c4a      	ldr	r4, [pc, #296]	; (80006cc <HAL_RCC_OscConfig+0x270>)
 80005a4:	4b4b      	ldr	r3, [pc, #300]	; (80006d4 <HAL_RCC_OscConfig+0x278>)
 80005a6:	b1da      	cbz	r2, 80005e0 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005ac:	f7ff fdf2 	bl	8000194 <HAL_GetTick>
 80005b0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005b4:	079b      	lsls	r3, r3, #30
 80005b6:	d50d      	bpl.n	80005d4 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005b8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005bc:	4b46      	ldr	r3, [pc, #280]	; (80006d8 <HAL_RCC_OscConfig+0x27c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80005c4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80005c6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80005c8:	9b01      	ldr	r3, [sp, #4]
 80005ca:	1e5a      	subs	r2, r3, #1
 80005cc:	9201      	str	r2, [sp, #4]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d1f9      	bne.n	80005c6 <HAL_RCC_OscConfig+0x16a>
 80005d2:	e750      	b.n	8000476 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80005d4:	f7ff fdde 	bl	8000194 <HAL_GetTick>
 80005d8:	1b80      	subs	r0, r0, r6
 80005da:	2802      	cmp	r0, #2
 80005dc:	d9e9      	bls.n	80005b2 <HAL_RCC_OscConfig+0x156>
 80005de:	e77f      	b.n	80004e0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80005e0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005e2:	f7ff fdd7 	bl	8000194 <HAL_GetTick>
 80005e6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80005e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005ea:	079f      	lsls	r7, r3, #30
 80005ec:	f57f af43 	bpl.w	8000476 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80005f0:	f7ff fdd0 	bl	8000194 <HAL_GetTick>
 80005f4:	1b80      	subs	r0, r0, r6
 80005f6:	2802      	cmp	r0, #2
 80005f8:	d9f6      	bls.n	80005e8 <HAL_RCC_OscConfig+0x18c>
 80005fa:	e771      	b.n	80004e0 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80005fc:	4c33      	ldr	r4, [pc, #204]	; (80006cc <HAL_RCC_OscConfig+0x270>)
 80005fe:	69e3      	ldr	r3, [r4, #28]
 8000600:	00d8      	lsls	r0, r3, #3
 8000602:	d424      	bmi.n	800064e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000604:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000606:	69e3      	ldr	r3, [r4, #28]
 8000608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060c:	61e3      	str	r3, [r4, #28]
 800060e:	69e3      	ldr	r3, [r4, #28]
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000618:	4e30      	ldr	r6, [pc, #192]	; (80006dc <HAL_RCC_OscConfig+0x280>)
 800061a:	6833      	ldr	r3, [r6, #0]
 800061c:	05d9      	lsls	r1, r3, #23
 800061e:	d518      	bpl.n	8000652 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000620:	68eb      	ldr	r3, [r5, #12]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d126      	bne.n	8000674 <HAL_RCC_OscConfig+0x218>
 8000626:	6a23      	ldr	r3, [r4, #32]
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800062e:	f7ff fdb1 	bl	8000194 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000632:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000636:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000638:	6a23      	ldr	r3, [r4, #32]
 800063a:	079b      	lsls	r3, r3, #30
 800063c:	d53f      	bpl.n	80006be <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800063e:	2f00      	cmp	r7, #0
 8000640:	f43f af1d 	beq.w	800047e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000644:	69e3      	ldr	r3, [r4, #28]
 8000646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800064a:	61e3      	str	r3, [r4, #28]
 800064c:	e717      	b.n	800047e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800064e:	2700      	movs	r7, #0
 8000650:	e7e2      	b.n	8000618 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000652:	6833      	ldr	r3, [r6, #0]
 8000654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000658:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800065a:	f7ff fd9b 	bl	8000194 <HAL_GetTick>
 800065e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000660:	6833      	ldr	r3, [r6, #0]
 8000662:	05da      	lsls	r2, r3, #23
 8000664:	d4dc      	bmi.n	8000620 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000666:	f7ff fd95 	bl	8000194 <HAL_GetTick>
 800066a:	eba0 0008 	sub.w	r0, r0, r8
 800066e:	2864      	cmp	r0, #100	; 0x64
 8000670:	d9f6      	bls.n	8000660 <HAL_RCC_OscConfig+0x204>
 8000672:	e735      	b.n	80004e0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000674:	b9ab      	cbnz	r3, 80006a2 <HAL_RCC_OscConfig+0x246>
 8000676:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000678:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800067c:	f023 0301 	bic.w	r3, r3, #1
 8000680:	6223      	str	r3, [r4, #32]
 8000682:	6a23      	ldr	r3, [r4, #32]
 8000684:	f023 0304 	bic.w	r3, r3, #4
 8000688:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800068a:	f7ff fd83 	bl	8000194 <HAL_GetTick>
 800068e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000690:	6a23      	ldr	r3, [r4, #32]
 8000692:	0798      	lsls	r0, r3, #30
 8000694:	d5d3      	bpl.n	800063e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000696:	f7ff fd7d 	bl	8000194 <HAL_GetTick>
 800069a:	1b80      	subs	r0, r0, r6
 800069c:	4540      	cmp	r0, r8
 800069e:	d9f7      	bls.n	8000690 <HAL_RCC_OscConfig+0x234>
 80006a0:	e71e      	b.n	80004e0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006a2:	2b05      	cmp	r3, #5
 80006a4:	6a23      	ldr	r3, [r4, #32]
 80006a6:	d103      	bne.n	80006b0 <HAL_RCC_OscConfig+0x254>
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6223      	str	r3, [r4, #32]
 80006ae:	e7ba      	b.n	8000626 <HAL_RCC_OscConfig+0x1ca>
 80006b0:	f023 0301 	bic.w	r3, r3, #1
 80006b4:	6223      	str	r3, [r4, #32]
 80006b6:	6a23      	ldr	r3, [r4, #32]
 80006b8:	f023 0304 	bic.w	r3, r3, #4
 80006bc:	e7b6      	b.n	800062c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006be:	f7ff fd69 	bl	8000194 <HAL_GetTick>
 80006c2:	eba0 0008 	sub.w	r0, r0, r8
 80006c6:	42b0      	cmp	r0, r6
 80006c8:	d9b6      	bls.n	8000638 <HAL_RCC_OscConfig+0x1dc>
 80006ca:	e709      	b.n	80004e0 <HAL_RCC_OscConfig+0x84>
 80006cc:	40021000 	.word	0x40021000
 80006d0:	42420000 	.word	0x42420000
 80006d4:	42420480 	.word	0x42420480
 80006d8:	200000cc 	.word	0x200000cc
 80006dc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80006e0:	4c22      	ldr	r4, [pc, #136]	; (800076c <HAL_RCC_OscConfig+0x310>)
 80006e2:	6863      	ldr	r3, [r4, #4]
 80006e4:	f003 030c 	and.w	r3, r3, #12
 80006e8:	2b08      	cmp	r3, #8
 80006ea:	f43f aee2 	beq.w	80004b2 <HAL_RCC_OscConfig+0x56>
 80006ee:	2300      	movs	r3, #0
 80006f0:	4e1f      	ldr	r6, [pc, #124]	; (8000770 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80006f2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80006f4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80006f6:	d12b      	bne.n	8000750 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80006f8:	f7ff fd4c 	bl	8000194 <HAL_GetTick>
 80006fc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80006fe:	6823      	ldr	r3, [r4, #0]
 8000700:	0199      	lsls	r1, r3, #6
 8000702:	d41f      	bmi.n	8000744 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000704:	6a2b      	ldr	r3, [r5, #32]
 8000706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800070a:	d105      	bne.n	8000718 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800070c:	6862      	ldr	r2, [r4, #4]
 800070e:	68a9      	ldr	r1, [r5, #8]
 8000710:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000714:	430a      	orrs	r2, r1
 8000716:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000718:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800071a:	6862      	ldr	r2, [r4, #4]
 800071c:	430b      	orrs	r3, r1
 800071e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000722:	4313      	orrs	r3, r2
 8000724:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000726:	2301      	movs	r3, #1
 8000728:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800072a:	f7ff fd33 	bl	8000194 <HAL_GetTick>
 800072e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000730:	6823      	ldr	r3, [r4, #0]
 8000732:	019a      	lsls	r2, r3, #6
 8000734:	f53f aea7 	bmi.w	8000486 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000738:	f7ff fd2c 	bl	8000194 <HAL_GetTick>
 800073c:	1b40      	subs	r0, r0, r5
 800073e:	2802      	cmp	r0, #2
 8000740:	d9f6      	bls.n	8000730 <HAL_RCC_OscConfig+0x2d4>
 8000742:	e6cd      	b.n	80004e0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000744:	f7ff fd26 	bl	8000194 <HAL_GetTick>
 8000748:	1bc0      	subs	r0, r0, r7
 800074a:	2802      	cmp	r0, #2
 800074c:	d9d7      	bls.n	80006fe <HAL_RCC_OscConfig+0x2a2>
 800074e:	e6c7      	b.n	80004e0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000750:	f7ff fd20 	bl	8000194 <HAL_GetTick>
 8000754:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000756:	6823      	ldr	r3, [r4, #0]
 8000758:	019b      	lsls	r3, r3, #6
 800075a:	f57f ae94 	bpl.w	8000486 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800075e:	f7ff fd19 	bl	8000194 <HAL_GetTick>
 8000762:	1b40      	subs	r0, r0, r5
 8000764:	2802      	cmp	r0, #2
 8000766:	d9f6      	bls.n	8000756 <HAL_RCC_OscConfig+0x2fa>
 8000768:	e6ba      	b.n	80004e0 <HAL_RCC_OscConfig+0x84>
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000
 8000770:	42420060 	.word	0x42420060

08000774 <HAL_RCC_GetSysClockFreq>:
{
 8000774:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <HAL_RCC_GetSysClockFreq+0x6c>)
{
 8000778:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800077a:	ac02      	add	r4, sp, #8
 800077c:	f103 0510 	add.w	r5, r3, #16
 8000780:	4622      	mov	r2, r4
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	6859      	ldr	r1, [r3, #4]
 8000786:	3308      	adds	r3, #8
 8000788:	c203      	stmia	r2!, {r0, r1}
 800078a:	42ab      	cmp	r3, r5
 800078c:	4614      	mov	r4, r2
 800078e:	d1f7      	bne.n	8000780 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000790:	2301      	movs	r3, #1
 8000792:	f88d 3004 	strb.w	r3, [sp, #4]
 8000796:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000798:	4912      	ldr	r1, [pc, #72]	; (80007e4 <HAL_RCC_GetSysClockFreq+0x70>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800079a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800079e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007a0:	f003 020c 	and.w	r2, r3, #12
 80007a4:	2a08      	cmp	r2, #8
 80007a6:	d118      	bne.n	80007da <HAL_RCC_GetSysClockFreq+0x66>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007a8:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007ac:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007ae:	bf48      	it	mi
 80007b0:	684b      	ldrmi	r3, [r1, #4]
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007b2:	a806      	add	r0, sp, #24
 80007b4:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007b6:	bf48      	it	mi
 80007b8:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007bc:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007c0:	bf41      	itttt	mi
 80007c2:	aa06      	addmi	r2, sp, #24
 80007c4:	189b      	addmi	r3, r3, r2
 80007c6:	f813 2c14 	ldrbmi.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80007ca:	4b07      	ldrmi	r3, [pc, #28]	; (80007e8 <HAL_RCC_GetSysClockFreq+0x74>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80007cc:	bf54      	ite	pl
 80007ce:	4b07      	ldrpl	r3, [pc, #28]	; (80007ec <HAL_RCC_GetSysClockFreq+0x78>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80007d0:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80007d4:	4358      	muls	r0, r3
}
 80007d6:	b007      	add	sp, #28
 80007d8:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 80007da:	4803      	ldr	r0, [pc, #12]	; (80007e8 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 80007dc:	e7fb      	b.n	80007d6 <HAL_RCC_GetSysClockFreq+0x62>
 80007de:	bf00      	nop
 80007e0:	08002964 	.word	0x08002964
 80007e4:	40021000 	.word	0x40021000
 80007e8:	007a1200 	.word	0x007a1200
 80007ec:	003d0900 	.word	0x003d0900

080007f0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007f0:	4a4d      	ldr	r2, [pc, #308]	; (8000928 <HAL_RCC_ClockConfig+0x138>)
{
 80007f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007f6:	6813      	ldr	r3, [r2, #0]
{
 80007f8:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	428b      	cmp	r3, r1
{
 8000800:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000802:	d328      	bcc.n	8000856 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000804:	682a      	ldr	r2, [r5, #0]
 8000806:	0791      	lsls	r1, r2, #30
 8000808:	d432      	bmi.n	8000870 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800080a:	07d2      	lsls	r2, r2, #31
 800080c:	d438      	bmi.n	8000880 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800080e:	4a46      	ldr	r2, [pc, #280]	; (8000928 <HAL_RCC_ClockConfig+0x138>)
 8000810:	6813      	ldr	r3, [r2, #0]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	429e      	cmp	r6, r3
 8000818:	d373      	bcc.n	8000902 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800081a:	682a      	ldr	r2, [r5, #0]
 800081c:	4c43      	ldr	r4, [pc, #268]	; (800092c <HAL_RCC_ClockConfig+0x13c>)
 800081e:	f012 0f04 	tst.w	r2, #4
 8000822:	d179      	bne.n	8000918 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000824:	0713      	lsls	r3, r2, #28
 8000826:	d506      	bpl.n	8000836 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000828:	6863      	ldr	r3, [r4, #4]
 800082a:	692a      	ldr	r2, [r5, #16]
 800082c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000830:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000834:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000836:	f7ff ff9d 	bl	8000774 <HAL_RCC_GetSysClockFreq>
 800083a:	6863      	ldr	r3, [r4, #4]
 800083c:	4a3c      	ldr	r2, [pc, #240]	; (8000930 <HAL_RCC_ClockConfig+0x140>)
 800083e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000842:	5cd3      	ldrb	r3, [r2, r3]
 8000844:	40d8      	lsrs	r0, r3
 8000846:	4b3b      	ldr	r3, [pc, #236]	; (8000934 <HAL_RCC_ClockConfig+0x144>)
 8000848:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800084a:	2000      	movs	r0, #0
 800084c:	f001 ffc4 	bl	80027d8 <HAL_InitTick>
  return HAL_OK;
 8000850:	2000      	movs	r0, #0
}
 8000852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000856:	6813      	ldr	r3, [r2, #0]
 8000858:	f023 0307 	bic.w	r3, r3, #7
 800085c:	430b      	orrs	r3, r1
 800085e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000860:	6813      	ldr	r3, [r2, #0]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	4299      	cmp	r1, r3
 8000868:	d0cc      	beq.n	8000804 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800086a:	2001      	movs	r0, #1
 800086c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000870:	492e      	ldr	r1, [pc, #184]	; (800092c <HAL_RCC_ClockConfig+0x13c>)
 8000872:	68a8      	ldr	r0, [r5, #8]
 8000874:	684b      	ldr	r3, [r1, #4]
 8000876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800087a:	4303      	orrs	r3, r0
 800087c:	604b      	str	r3, [r1, #4]
 800087e:	e7c4      	b.n	800080a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000880:	686a      	ldr	r2, [r5, #4]
 8000882:	4c2a      	ldr	r4, [pc, #168]	; (800092c <HAL_RCC_ClockConfig+0x13c>)
 8000884:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000886:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000888:	d11c      	bne.n	80008c4 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800088a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800088e:	d0ec      	beq.n	800086a <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000890:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000892:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000896:	f023 0303 	bic.w	r3, r3, #3
 800089a:	4313      	orrs	r3, r2
 800089c:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800089e:	f7ff fc79 	bl	8000194 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008a2:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008a4:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d114      	bne.n	80008d4 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008aa:	6863      	ldr	r3, [r4, #4]
 80008ac:	f003 030c 	and.w	r3, r3, #12
 80008b0:	2b04      	cmp	r3, #4
 80008b2:	d0ac      	beq.n	800080e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008b4:	f7ff fc6e 	bl	8000194 <HAL_GetTick>
 80008b8:	1bc0      	subs	r0, r0, r7
 80008ba:	4540      	cmp	r0, r8
 80008bc:	d9f5      	bls.n	80008aa <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80008be:	2003      	movs	r0, #3
 80008c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80008c4:	2a02      	cmp	r2, #2
 80008c6:	d102      	bne.n	80008ce <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80008c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80008cc:	e7df      	b.n	800088e <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008ce:	f013 0f02 	tst.w	r3, #2
 80008d2:	e7dc      	b.n	800088e <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d10f      	bne.n	80008f8 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008d8:	6863      	ldr	r3, [r4, #4]
 80008da:	f003 030c 	and.w	r3, r3, #12
 80008de:	2b08      	cmp	r3, #8
 80008e0:	d095      	beq.n	800080e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008e2:	f7ff fc57 	bl	8000194 <HAL_GetTick>
 80008e6:	1bc0      	subs	r0, r0, r7
 80008e8:	4540      	cmp	r0, r8
 80008ea:	d9f5      	bls.n	80008d8 <HAL_RCC_ClockConfig+0xe8>
 80008ec:	e7e7      	b.n	80008be <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008ee:	f7ff fc51 	bl	8000194 <HAL_GetTick>
 80008f2:	1bc0      	subs	r0, r0, r7
 80008f4:	4540      	cmp	r0, r8
 80008f6:	d8e2      	bhi.n	80008be <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80008f8:	6863      	ldr	r3, [r4, #4]
 80008fa:	f013 0f0c 	tst.w	r3, #12
 80008fe:	d1f6      	bne.n	80008ee <HAL_RCC_ClockConfig+0xfe>
 8000900:	e785      	b.n	800080e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000902:	6813      	ldr	r3, [r2, #0]
 8000904:	f023 0307 	bic.w	r3, r3, #7
 8000908:	4333      	orrs	r3, r6
 800090a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800090c:	6813      	ldr	r3, [r2, #0]
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	429e      	cmp	r6, r3
 8000914:	d1a9      	bne.n	800086a <HAL_RCC_ClockConfig+0x7a>
 8000916:	e780      	b.n	800081a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000918:	6863      	ldr	r3, [r4, #4]
 800091a:	68e9      	ldr	r1, [r5, #12]
 800091c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000920:	430b      	orrs	r3, r1
 8000922:	6063      	str	r3, [r4, #4]
 8000924:	e77e      	b.n	8000824 <HAL_RCC_ClockConfig+0x34>
 8000926:	bf00      	nop
 8000928:	40022000 	.word	0x40022000
 800092c:	40021000 	.word	0x40021000
 8000930:	080029d4 	.word	0x080029d4
 8000934:	200000cc 	.word	0x200000cc

08000938 <HAL_RCC_GetHCLKFreq>:
}
 8000938:	4b01      	ldr	r3, [pc, #4]	; (8000940 <HAL_RCC_GetHCLKFreq+0x8>)
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	200000cc 	.word	0x200000cc

08000944 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000946:	4a05      	ldr	r2, [pc, #20]	; (800095c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800094e:	5cd3      	ldrb	r3, [r2, r3]
 8000950:	4a03      	ldr	r2, [pc, #12]	; (8000960 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000952:	6810      	ldr	r0, [r2, #0]
}    
 8000954:	40d8      	lsrs	r0, r3
 8000956:	4770      	bx	lr
 8000958:	40021000 	.word	0x40021000
 800095c:	080029e4 	.word	0x080029e4
 8000960:	200000cc 	.word	0x200000cc

08000964 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800096e:	5cd3      	ldrb	r3, [r2, r3]
 8000970:	4a03      	ldr	r2, [pc, #12]	; (8000980 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000972:	6810      	ldr	r0, [r2, #0]
} 
 8000974:	40d8      	lsrs	r0, r3
 8000976:	4770      	bx	lr
 8000978:	40021000 	.word	0x40021000
 800097c:	080029e4 	.word	0x080029e4
 8000980:	200000cc 	.word	0x200000cc

08000984 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000984:	230f      	movs	r3, #15
 8000986:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_RCC_GetClockConfig+0x34>)
 800098a:	685a      	ldr	r2, [r3, #4]
 800098c:	f002 0203 	and.w	r2, r2, #3
 8000990:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000998:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800099a:	685a      	ldr	r2, [r3, #4]
 800099c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80009a0:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	08db      	lsrs	r3, r3, #3
 80009a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80009aa:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <HAL_RCC_GetClockConfig+0x38>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f003 0307 	and.w	r3, r3, #7
 80009b4:	600b      	str	r3, [r1, #0]
 80009b6:	4770      	bx	lr
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40022000 	.word	0x40022000

080009c0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80009c0:	6a03      	ldr	r3, [r0, #32]
{
 80009c2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80009c4:	f023 0301 	bic.w	r3, r3, #1
 80009c8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80009ca:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80009cc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80009ce:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80009d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80009d2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80009d6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80009d8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80009da:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80009de:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80009e0:	4d0a      	ldr	r5, [pc, #40]	; (8000a0c <TIM_OC1_SetConfig+0x4c>)
 80009e2:	42a8      	cmp	r0, r5
 80009e4:	d10b      	bne.n	80009fe <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80009e6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80009e8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80009ec:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80009ee:	698e      	ldr	r6, [r1, #24]
 80009f0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80009f2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80009f6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80009f8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80009fc:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80009fe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000a00:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000a02:	684a      	ldr	r2, [r1, #4]
 8000a04:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000a06:	6203      	str	r3, [r0, #32]
 8000a08:	bd70      	pop	{r4, r5, r6, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40012c00 	.word	0x40012c00

08000a10 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000a10:	6a03      	ldr	r3, [r0, #32]
{
 8000a12:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a18:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000a1a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000a1c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000a1e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000a20:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000a22:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000a26:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000a28:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000a2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000a2e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000a32:	4d0b      	ldr	r5, [pc, #44]	; (8000a60 <TIM_OC3_SetConfig+0x50>)
 8000a34:	42a8      	cmp	r0, r5
 8000a36:	d10d      	bne.n	8000a54 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000a38:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000a3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000a3e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000a42:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000a44:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000a46:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000a4a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000a4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000a50:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000a54:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000a56:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000a58:	684a      	ldr	r2, [r1, #4]
 8000a5a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000a5c:	6203      	str	r3, [r0, #32]
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
 8000a60:	40012c00 	.word	0x40012c00

08000a64 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000a64:	6a03      	ldr	r3, [r0, #32]
{
 8000a66:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000a68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a6c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000a6e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000a70:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000a72:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000a74:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000a76:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000a7a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000a7e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000a80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000a84:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000a88:	4d06      	ldr	r5, [pc, #24]	; (8000aa4 <TIM_OC4_SetConfig+0x40>)
 8000a8a:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000a8c:	bf02      	ittt	eq
 8000a8e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000a90:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000a94:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000a98:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000a9a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000a9c:	684a      	ldr	r2, [r1, #4]
 8000a9e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000aa0:	6203      	str	r3, [r0, #32]
 8000aa2:	bd30      	pop	{r4, r5, pc}
 8000aa4:	40012c00 	.word	0x40012c00

08000aa8 <HAL_TIM_Base_MspInit>:
 8000aa8:	4770      	bx	lr

08000aaa <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000aaa:	6803      	ldr	r3, [r0, #0]
}
 8000aac:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	f042 0201 	orr.w	r2, r2, #1
 8000ab4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	f042 0201 	orr.w	r2, r2, #1
 8000abc:	601a      	str	r2, [r3, #0]
}
 8000abe:	4770      	bx	lr

08000ac0 <HAL_TIM_OC_DelayElapsedCallback>:
 8000ac0:	4770      	bx	lr

08000ac2 <HAL_TIM_IC_CaptureCallback>:
 8000ac2:	4770      	bx	lr

08000ac4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000ac4:	4770      	bx	lr

08000ac6 <HAL_TIM_TriggerCallback>:
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ac8:	6803      	ldr	r3, [r0, #0]
{
 8000aca:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000acc:	691a      	ldr	r2, [r3, #16]
{
 8000ace:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ad0:	0791      	lsls	r1, r2, #30
 8000ad2:	d50e      	bpl.n	8000af2 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000ad4:	68da      	ldr	r2, [r3, #12]
 8000ad6:	0792      	lsls	r2, r2, #30
 8000ad8:	d50b      	bpl.n	8000af2 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000ada:	f06f 0202 	mvn.w	r2, #2
 8000ade:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000ae0:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ae2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000ae4:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ae6:	079b      	lsls	r3, r3, #30
 8000ae8:	d077      	beq.n	8000bda <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000aea:	f7ff ffea 	bl	8000ac2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000aee:	2300      	movs	r3, #0
 8000af0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000af2:	6823      	ldr	r3, [r4, #0]
 8000af4:	691a      	ldr	r2, [r3, #16]
 8000af6:	0750      	lsls	r0, r2, #29
 8000af8:	d510      	bpl.n	8000b1c <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000afa:	68da      	ldr	r2, [r3, #12]
 8000afc:	0751      	lsls	r1, r2, #29
 8000afe:	d50d      	bpl.n	8000b1c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000b00:	f06f 0204 	mvn.w	r2, #4
 8000b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000b06:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000b08:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000b0a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000b0c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000b10:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000b12:	d068      	beq.n	8000be6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000b14:	f7ff ffd5 	bl	8000ac2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000b1c:	6823      	ldr	r3, [r4, #0]
 8000b1e:	691a      	ldr	r2, [r3, #16]
 8000b20:	0712      	lsls	r2, r2, #28
 8000b22:	d50f      	bpl.n	8000b44 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	0710      	lsls	r0, r2, #28
 8000b28:	d50c      	bpl.n	8000b44 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000b2a:	f06f 0208 	mvn.w	r2, #8
 8000b2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000b30:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000b32:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000b34:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000b36:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8000b38:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000b3a:	d05a      	beq.n	8000bf2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000b3c:	f7ff ffc1 	bl	8000ac2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b40:	2300      	movs	r3, #0
 8000b42:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	691a      	ldr	r2, [r3, #16]
 8000b48:	06d2      	lsls	r2, r2, #27
 8000b4a:	d510      	bpl.n	8000b6e <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000b4c:	68da      	ldr	r2, [r3, #12]
 8000b4e:	06d0      	lsls	r0, r2, #27
 8000b50:	d50d      	bpl.n	8000b6e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000b52:	f06f 0210 	mvn.w	r2, #16
 8000b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000b58:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000b5a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000b5c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000b5e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000b62:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000b64:	d04b      	beq.n	8000bfe <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000b66:	f7ff ffac 	bl	8000ac2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000b6e:	6823      	ldr	r3, [r4, #0]
 8000b70:	691a      	ldr	r2, [r3, #16]
 8000b72:	07d1      	lsls	r1, r2, #31
 8000b74:	d508      	bpl.n	8000b88 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000b76:	68da      	ldr	r2, [r3, #12]
 8000b78:	07d2      	lsls	r2, r2, #31
 8000b7a:	d505      	bpl.n	8000b88 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000b7c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8000b80:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000b82:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000b84:	f001 fd76 	bl	8002674 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000b88:	6823      	ldr	r3, [r4, #0]
 8000b8a:	691a      	ldr	r2, [r3, #16]
 8000b8c:	0610      	lsls	r0, r2, #24
 8000b8e:	d508      	bpl.n	8000ba2 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	0611      	lsls	r1, r2, #24
 8000b94:	d505      	bpl.n	8000ba2 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000b96:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8000b9a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000b9c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000b9e:	f000 f974 	bl	8000e8a <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000ba2:	6823      	ldr	r3, [r4, #0]
 8000ba4:	691a      	ldr	r2, [r3, #16]
 8000ba6:	0652      	lsls	r2, r2, #25
 8000ba8:	d508      	bpl.n	8000bbc <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000baa:	68da      	ldr	r2, [r3, #12]
 8000bac:	0650      	lsls	r0, r2, #25
 8000bae:	d505      	bpl.n	8000bbc <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000bb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8000bb4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000bb6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000bb8:	f7ff ff85 	bl	8000ac6 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000bbc:	6823      	ldr	r3, [r4, #0]
 8000bbe:	691a      	ldr	r2, [r3, #16]
 8000bc0:	0691      	lsls	r1, r2, #26
 8000bc2:	d522      	bpl.n	8000c0a <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000bc4:	68da      	ldr	r2, [r3, #12]
 8000bc6:	0692      	lsls	r2, r2, #26
 8000bc8:	d51f      	bpl.n	8000c0a <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000bca:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000bce:	4620      	mov	r0, r4
}
 8000bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000bd4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000bd6:	f000 b957 	b.w	8000e88 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000bda:	f7ff ff71 	bl	8000ac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000bde:	4620      	mov	r0, r4
 8000be0:	f7ff ff70 	bl	8000ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000be4:	e783      	b.n	8000aee <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000be6:	f7ff ff6b 	bl	8000ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000bea:	4620      	mov	r0, r4
 8000bec:	f7ff ff6a 	bl	8000ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000bf0:	e792      	b.n	8000b18 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000bf2:	f7ff ff65 	bl	8000ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	f7ff ff64 	bl	8000ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000bfc:	e7a0      	b.n	8000b40 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000bfe:	f7ff ff5f 	bl	8000ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c02:	4620      	mov	r0, r4
 8000c04:	f7ff ff5e 	bl	8000ac4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000c08:	e7af      	b.n	8000b6a <HAL_TIM_IRQHandler+0xa2>
 8000c0a:	bd10      	pop	{r4, pc}

08000c0c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000c0c:	4a1a      	ldr	r2, [pc, #104]	; (8000c78 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000c0e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000c10:	4290      	cmp	r0, r2
 8000c12:	d00a      	beq.n	8000c2a <TIM_Base_SetConfig+0x1e>
 8000c14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000c18:	d007      	beq.n	8000c2a <TIM_Base_SetConfig+0x1e>
 8000c1a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000c1e:	4290      	cmp	r0, r2
 8000c20:	d003      	beq.n	8000c2a <TIM_Base_SetConfig+0x1e>
 8000c22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c26:	4290      	cmp	r0, r2
 8000c28:	d115      	bne.n	8000c56 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8000c2a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000c30:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000c32:	4a11      	ldr	r2, [pc, #68]	; (8000c78 <TIM_Base_SetConfig+0x6c>)
 8000c34:	4290      	cmp	r0, r2
 8000c36:	d00a      	beq.n	8000c4e <TIM_Base_SetConfig+0x42>
 8000c38:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000c3c:	d007      	beq.n	8000c4e <TIM_Base_SetConfig+0x42>
 8000c3e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000c42:	4290      	cmp	r0, r2
 8000c44:	d003      	beq.n	8000c4e <TIM_Base_SetConfig+0x42>
 8000c46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c4a:	4290      	cmp	r0, r2
 8000c4c:	d103      	bne.n	8000c56 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c4e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c54:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000c56:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000c58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000c5c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000c5e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000c60:	688b      	ldr	r3, [r1, #8]
 8000c62:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000c64:	680b      	ldr	r3, [r1, #0]
 8000c66:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <TIM_Base_SetConfig+0x6c>)
 8000c6a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000c6c:	bf04      	itt	eq
 8000c6e:	690b      	ldreq	r3, [r1, #16]
 8000c70:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000c72:	2301      	movs	r3, #1
 8000c74:	6143      	str	r3, [r0, #20]
 8000c76:	4770      	bx	lr
 8000c78:	40012c00 	.word	0x40012c00

08000c7c <HAL_TIM_Base_Init>:
{
 8000c7c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000c7e:	4604      	mov	r4, r0
 8000c80:	b1a0      	cbz	r0, 8000cac <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000c82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000c86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c8a:	b91b      	cbnz	r3, 8000c94 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000c8c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000c90:	f7ff ff0a 	bl	8000aa8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000c94:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c96:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000c98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c9c:	1d21      	adds	r1, r4, #4
 8000c9e:	f7ff ffb5 	bl	8000c0c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000ca2:	2301      	movs	r3, #1
  return HAL_OK;
 8000ca4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000ca6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000caa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000cac:	2001      	movs	r0, #1
}
 8000cae:	bd10      	pop	{r4, pc}

08000cb0 <HAL_TIM_PWM_Init>:
{
 8000cb0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	b1a0      	cbz	r0, 8000ce0 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000cb6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000cba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000cbe:	b91b      	cbnz	r3, 8000cc8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000cc0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8000cc4:	f001 fd36 	bl	8002734 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000cc8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000cca:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000ccc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000cd0:	1d21      	adds	r1, r4, #4
 8000cd2:	f7ff ff9b 	bl	8000c0c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000cd6:	2301      	movs	r3, #1
  return HAL_OK;
 8000cd8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000cda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000cde:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000ce0:	2001      	movs	r0, #1
}
 8000ce2:	bd10      	pop	{r4, pc}

08000ce4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ce4:	6a03      	ldr	r3, [r0, #32]
{
 8000ce6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ce8:	f023 0310 	bic.w	r3, r3, #16
 8000cec:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000cee:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8000cf0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8000cf2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000cf4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000cf6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000cfa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000cfe:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8000d00:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000d04:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8000d08:	4d0b      	ldr	r5, [pc, #44]	; (8000d38 <TIM_OC2_SetConfig+0x54>)
 8000d0a:	42a8      	cmp	r0, r5
 8000d0c:	d10d      	bne.n	8000d2a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000d0e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8000d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000d14:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000d18:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8000d1a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8000d1c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000d20:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8000d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000d26:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8000d2a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000d2c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8000d2e:	684a      	ldr	r2, [r1, #4]
 8000d30:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8000d32:	6203      	str	r3, [r0, #32]
 8000d34:	bd70      	pop	{r4, r5, r6, pc}
 8000d36:	bf00      	nop
 8000d38:	40012c00 	.word	0x40012c00

08000d3c <HAL_TIM_PWM_ConfigChannel>:
{
 8000d3c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8000d3e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000d42:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	f04f 0002 	mov.w	r0, #2
 8000d4a:	d025      	beq.n	8000d98 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8000d4c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000d4e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8000d52:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8000d56:	2a0c      	cmp	r2, #12
 8000d58:	d818      	bhi.n	8000d8c <HAL_TIM_PWM_ConfigChannel+0x50>
 8000d5a:	e8df f002 	tbb	[pc, r2]
 8000d5e:	1707      	.short	0x1707
 8000d60:	171e1717 	.word	0x171e1717
 8000d64:	172f1717 	.word	0x172f1717
 8000d68:	1717      	.short	0x1717
 8000d6a:	40          	.byte	0x40
 8000d6b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000d6c:	6820      	ldr	r0, [r4, #0]
 8000d6e:	f7ff fe27 	bl	80009c0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000d72:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000d74:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000d76:	699a      	ldr	r2, [r3, #24]
 8000d78:	f042 0208 	orr.w	r2, r2, #8
 8000d7c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000d7e:	699a      	ldr	r2, [r3, #24]
 8000d80:	f022 0204 	bic.w	r2, r2, #4
 8000d84:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000d86:	699a      	ldr	r2, [r3, #24]
 8000d88:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000d8a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8000d8c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000d8e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000d90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000d94:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8000d98:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000d9a:	6820      	ldr	r0, [r4, #0]
 8000d9c:	f7ff ffa2 	bl	8000ce4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000da0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000da2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000da4:	699a      	ldr	r2, [r3, #24]
 8000da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8000dac:	699a      	ldr	r2, [r3, #24]
 8000dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000db4:	699a      	ldr	r2, [r3, #24]
 8000db6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000dba:	e7e6      	b.n	8000d8a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000dbc:	6820      	ldr	r0, [r4, #0]
 8000dbe:	f7ff fe27 	bl	8000a10 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000dc2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000dc4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000dc6:	69da      	ldr	r2, [r3, #28]
 8000dc8:	f042 0208 	orr.w	r2, r2, #8
 8000dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000dce:	69da      	ldr	r2, [r3, #28]
 8000dd0:	f022 0204 	bic.w	r2, r2, #4
 8000dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000dd6:	69da      	ldr	r2, [r3, #28]
 8000dd8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000dda:	61da      	str	r2, [r3, #28]
    break;
 8000ddc:	e7d6      	b.n	8000d8c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000dde:	6820      	ldr	r0, [r4, #0]
 8000de0:	f7ff fe40 	bl	8000a64 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000de4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000de6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000de8:	69da      	ldr	r2, [r3, #28]
 8000dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000dee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8000df0:	69da      	ldr	r2, [r3, #28]
 8000df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000df6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000df8:	69da      	ldr	r2, [r3, #28]
 8000dfa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000dfe:	e7ec      	b.n	8000dda <HAL_TIM_PWM_ConfigChannel+0x9e>

08000e00 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8000e00:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8000e02:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8000e04:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8000e06:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8000e08:	ea23 0304 	bic.w	r3, r3, r4
 8000e0c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8000e0e:	6a03      	ldr	r3, [r0, #32]
 8000e10:	408a      	lsls	r2, r1
 8000e12:	431a      	orrs	r2, r3
 8000e14:	6202      	str	r2, [r0, #32]
 8000e16:	bd10      	pop	{r4, pc}

08000e18 <HAL_TIM_PWM_Start>:
{
 8000e18:	b510      	push	{r4, lr}
 8000e1a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	6800      	ldr	r0, [r0, #0]
 8000e20:	f7ff ffee 	bl	8000e00 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <HAL_TIM_PWM_Start+0x28>)
}
 8000e28:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8000e2a:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8000e2c:	bf02      	ittt	eq
 8000e2e:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8000e30:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8000e34:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	f042 0201 	orr.w	r2, r2, #1
 8000e3c:	601a      	str	r2, [r3, #0]
}
 8000e3e:	bd10      	pop	{r4, pc}
 8000e40:	40012c00 	.word	0x40012c00

08000e44 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000e44:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000e48:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	f04f 0302 	mov.w	r3, #2
 8000e50:	d018      	beq.n	8000e84 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8000e52:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e56:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000e58:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e5a:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000e5c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e62:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	4322      	orrs	r2, r4
 8000e68:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e70:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	430a      	orrs	r2, r1
 8000e76:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000e84:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000e86:	bd10      	pop	{r4, pc}

08000e88 <HAL_TIMEx_CommutationCallback>:
 8000e88:	4770      	bx	lr

08000e8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000e8a:	4770      	bx	lr

08000e8c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e90:	6805      	ldr	r5, [r0, #0]
 8000e92:	68c2      	ldr	r2, [r0, #12]
 8000e94:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000e96:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ea0:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000ea2:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000ea8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000eac:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000eb0:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000eb6:	696b      	ldr	r3, [r5, #20]
 8000eb8:	6982      	ldr	r2, [r0, #24]
 8000eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000ec2:	4b40      	ldr	r3, [pc, #256]	; (8000fc4 <UART_SetConfig+0x138>)
{
 8000ec4:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000ec6:	429d      	cmp	r5, r3
 8000ec8:	f04f 0419 	mov.w	r4, #25
 8000ecc:	d146      	bne.n	8000f5c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000ece:	f7ff fd49 	bl	8000964 <HAL_RCC_GetPCLK2Freq>
 8000ed2:	fb04 f300 	mul.w	r3, r4, r0
 8000ed6:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000eda:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000ede:	00b6      	lsls	r6, r6, #2
 8000ee0:	fbb3 f3f6 	udiv	r3, r3, r6
 8000ee4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ee8:	011e      	lsls	r6, r3, #4
 8000eea:	f7ff fd3b 	bl	8000964 <HAL_RCC_GetPCLK2Freq>
 8000eee:	4360      	muls	r0, r4
 8000ef0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	fbb0 f7f3 	udiv	r7, r0, r3
 8000efa:	f7ff fd33 	bl	8000964 <HAL_RCC_GetPCLK2Freq>
 8000efe:	4360      	muls	r0, r4
 8000f00:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f0a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f0e:	fb08 7313 	mls	r3, r8, r3, r7
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	3332      	adds	r3, #50	; 0x32
 8000f16:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f1a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000f1e:	f7ff fd21 	bl	8000964 <HAL_RCC_GetPCLK2Freq>
 8000f22:	4360      	muls	r0, r4
 8000f24:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	fbb0 faf2 	udiv	sl, r0, r2
 8000f2e:	f7ff fd19 	bl	8000964 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f32:	4360      	muls	r0, r4
 8000f34:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f3e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f42:	fb08 a313 	mls	r3, r8, r3, sl
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	3332      	adds	r3, #50	; 0x32
 8000f4a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	433b      	orrs	r3, r7
 8000f54:	4433      	add	r3, r6
 8000f56:	60ab      	str	r3, [r5, #8]
 8000f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5c:	f7ff fcf2 	bl	8000944 <HAL_RCC_GetPCLK1Freq>
 8000f60:	fb04 f300 	mul.w	r3, r4, r0
 8000f64:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000f68:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000f6c:	00b6      	lsls	r6, r6, #2
 8000f6e:	fbb3 f3f6 	udiv	r3, r3, r6
 8000f72:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f76:	011e      	lsls	r6, r3, #4
 8000f78:	f7ff fce4 	bl	8000944 <HAL_RCC_GetPCLK1Freq>
 8000f7c:	4360      	muls	r0, r4
 8000f7e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	fbb0 f7f3 	udiv	r7, r0, r3
 8000f88:	f7ff fcdc 	bl	8000944 <HAL_RCC_GetPCLK1Freq>
 8000f8c:	4360      	muls	r0, r4
 8000f8e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f98:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f9c:	fb08 7313 	mls	r3, r8, r3, r7
 8000fa0:	011b      	lsls	r3, r3, #4
 8000fa2:	3332      	adds	r3, #50	; 0x32
 8000fa4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000fa8:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000fac:	f7ff fcca 	bl	8000944 <HAL_RCC_GetPCLK1Freq>
 8000fb0:	4360      	muls	r0, r4
 8000fb2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000fb6:	0092      	lsls	r2, r2, #2
 8000fb8:	fbb0 faf2 	udiv	sl, r0, r2
 8000fbc:	f7ff fcc2 	bl	8000944 <HAL_RCC_GetPCLK1Freq>
 8000fc0:	e7b7      	b.n	8000f32 <UART_SetConfig+0xa6>
 8000fc2:	bf00      	nop
 8000fc4:	40013800 	.word	0x40013800

08000fc8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fca:	4604      	mov	r4, r0
 8000fcc:	460e      	mov	r6, r1
 8000fce:	4617      	mov	r7, r2
 8000fd0:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000fd2:	6821      	ldr	r1, [r4, #0]
 8000fd4:	680b      	ldr	r3, [r1, #0]
 8000fd6:	ea36 0303 	bics.w	r3, r6, r3
 8000fda:	d101      	bne.n	8000fe0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000fdc:	2000      	movs	r0, #0
}
 8000fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000fe0:	1c6b      	adds	r3, r5, #1
 8000fe2:	d0f7      	beq.n	8000fd4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000fe4:	b995      	cbnz	r5, 800100c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000fe6:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000fe8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000ff0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000ff2:	695a      	ldr	r2, [r3, #20]
 8000ff4:	f022 0201 	bic.w	r2, r2, #1
 8000ff8:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000ffa:	2320      	movs	r3, #32
 8000ffc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001000:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001004:	2300      	movs	r3, #0
 8001006:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800100a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800100c:	f7ff f8c2 	bl	8000194 <HAL_GetTick>
 8001010:	1bc0      	subs	r0, r0, r7
 8001012:	4285      	cmp	r5, r0
 8001014:	d2dd      	bcs.n	8000fd2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001016:	e7e6      	b.n	8000fe6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001018 <HAL_UART_Init>:
{
 8001018:	b510      	push	{r4, lr}
  if(huart == NULL)
 800101a:	4604      	mov	r4, r0
 800101c:	b340      	cbz	r0, 8001070 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800101e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001022:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001026:	b91b      	cbnz	r3, 8001030 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001028:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800102c:	f001 fba8 	bl	8002780 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001030:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001032:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001034:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001038:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800103a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800103c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001040:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001042:	f7ff ff23 	bl	8000e8c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001046:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001048:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001052:	695a      	ldr	r2, [r3, #20]
 8001054:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001058:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001060:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001062:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001064:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001066:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800106a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800106e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001070:	2001      	movs	r0, #1
}
 8001072:	bd10      	pop	{r4, pc}

08001074 <HAL_UART_Transmit>:
{
 8001074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001078:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800107a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800107e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001080:	2b20      	cmp	r3, #32
{
 8001082:	460d      	mov	r5, r1
 8001084:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001086:	d14e      	bne.n	8001126 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001088:	2900      	cmp	r1, #0
 800108a:	d049      	beq.n	8001120 <HAL_UART_Transmit+0xac>
 800108c:	2a00      	cmp	r2, #0
 800108e:	d047      	beq.n	8001120 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001090:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001094:	2b01      	cmp	r3, #1
 8001096:	d046      	beq.n	8001126 <HAL_UART_Transmit+0xb2>
 8001098:	2301      	movs	r3, #1
 800109a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800109e:	2300      	movs	r3, #0
 80010a0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80010a2:	2321      	movs	r3, #33	; 0x21
 80010a4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80010a8:	f7ff f874 	bl	8000194 <HAL_GetTick>
 80010ac:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80010ae:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80010b2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80010b6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	b96b      	cbnz	r3, 80010d8 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80010bc:	463b      	mov	r3, r7
 80010be:	4632      	mov	r2, r6
 80010c0:	2140      	movs	r1, #64	; 0x40
 80010c2:	4620      	mov	r0, r4
 80010c4:	f7ff ff80 	bl	8000fc8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80010c8:	b9a8      	cbnz	r0, 80010f6 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80010ca:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80010cc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80010d0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80010d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80010d8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010da:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80010dc:	3b01      	subs	r3, #1
 80010de:	b29b      	uxth	r3, r3
 80010e0:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010e2:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010e4:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010ea:	4620      	mov	r0, r4
 80010ec:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010ee:	d10e      	bne.n	800110e <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010f0:	f7ff ff6a 	bl	8000fc8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80010f4:	b110      	cbz	r0, 80010fc <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80010f6:	2003      	movs	r0, #3
 80010f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80010fc:	882b      	ldrh	r3, [r5, #0]
 80010fe:	6822      	ldr	r2, [r4, #0]
 8001100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001104:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001106:	6923      	ldr	r3, [r4, #16]
 8001108:	b943      	cbnz	r3, 800111c <HAL_UART_Transmit+0xa8>
          pData +=2U;
 800110a:	3502      	adds	r5, #2
 800110c:	e7d3      	b.n	80010b6 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800110e:	f7ff ff5b 	bl	8000fc8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001112:	2800      	cmp	r0, #0
 8001114:	d1ef      	bne.n	80010f6 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	782a      	ldrb	r2, [r5, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	3501      	adds	r5, #1
 800111e:	e7ca      	b.n	80010b6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001120:	2001      	movs	r0, #1
 8001122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001126:	2002      	movs	r0, #2
}
 8001128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800112c <HAL_UART_Receive>:
{
 800112c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001130:	461f      	mov	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8001132:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8001136:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY)
 8001138:	2b20      	cmp	r3, #32
{
 800113a:	460d      	mov	r5, r1
 800113c:	4690      	mov	r8, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 800113e:	d151      	bne.n	80011e4 <HAL_UART_Receive+0xb8>
    if((pData == NULL) || (Size == 0U))
 8001140:	2900      	cmp	r1, #0
 8001142:	d04c      	beq.n	80011de <HAL_UART_Receive+0xb2>
 8001144:	2a00      	cmp	r2, #0
 8001146:	d04a      	beq.n	80011de <HAL_UART_Receive+0xb2>
    __HAL_LOCK(huart);
 8001148:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800114c:	2b01      	cmp	r3, #1
 800114e:	d049      	beq.n	80011e4 <HAL_UART_Receive+0xb8>
 8001150:	2301      	movs	r3, #1
 8001152:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001156:	2300      	movs	r3, #0
 8001158:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800115a:	2322      	movs	r3, #34	; 0x22
 800115c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8001160:	f7ff f818 	bl	8000194 <HAL_GetTick>
 8001164:	4606      	mov	r6, r0
    huart->RxXferSize = Size;
 8001166:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 800116a:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 800116e:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8001170:	b280      	uxth	r0, r0
 8001172:	b930      	cbnz	r0, 8001182 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8001174:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001176:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_READY;
 800117a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 800117e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 8001182:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001184:	4632      	mov	r2, r6
      huart->RxXferCount--;
 8001186:	3b01      	subs	r3, #1
 8001188:	b29b      	uxth	r3, r3
 800118a:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800118c:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800118e:	2120      	movs	r1, #32
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001194:	4620      	mov	r0, r4
 8001196:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001198:	d112      	bne.n	80011c0 <HAL_UART_Receive+0x94>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800119a:	f7ff ff15 	bl	8000fc8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800119e:	b110      	cbz	r0, 80011a6 <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 80011a0:	2003      	movs	r0, #3
 80011a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011a6:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80011a8:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80011aa:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80011ac:	b922      	cbnz	r2, 80011b8 <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80011ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011b2:	f825 3b02 	strh.w	r3, [r5], #2
 80011b6:	e7da      	b.n	800116e <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	f825 3b01 	strh.w	r3, [r5], #1
 80011be:	e7d6      	b.n	800116e <HAL_UART_Receive+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80011c0:	f7ff ff02 	bl	8000fc8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80011c4:	2800      	cmp	r0, #0
 80011c6:	d1eb      	bne.n	80011a0 <HAL_UART_Receive+0x74>
 80011c8:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80011ca:	6921      	ldr	r1, [r4, #16]
 80011cc:	1c6a      	adds	r2, r5, #1
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80011ce:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80011d0:	b911      	cbnz	r1, 80011d8 <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80011d2:	702b      	strb	r3, [r5, #0]
 80011d4:	4615      	mov	r5, r2
 80011d6:	e7ca      	b.n	800116e <HAL_UART_Receive+0x42>
 80011d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011dc:	e7f9      	b.n	80011d2 <HAL_UART_Receive+0xa6>
      return  HAL_ERROR;
 80011de:	2001      	movs	r0, #1
 80011e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80011e4:	2002      	movs	r0, #2
}
 80011e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080011ea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80011ea:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80011ec:	f000 fc02 	bl	80019f4 <vTaskStartScheduler>
  
  return osOK;
}
 80011f0:	2000      	movs	r0, #0
 80011f2:	bd08      	pop	{r3, pc}

080011f4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80011f4:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80011f6:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 80011fa:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80011fc:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80011fe:	bf08      	it	eq
 8001200:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001202:	8a02      	ldrh	r2, [r0, #16]
    fpriority += (priority - osPriorityIdle);
 8001204:	bf18      	it	ne
 8001206:	3403      	addne	r4, #3
{
 8001208:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800120a:	e890 0022 	ldmia.w	r0, {r1, r5}
 800120e:	a803      	add	r0, sp, #12
 8001210:	9001      	str	r0, [sp, #4]
 8001212:	9400      	str	r4, [sp, #0]
 8001214:	4628      	mov	r0, r5
 8001216:	f000 fb1d 	bl	8001854 <xTaskCreate>
 800121a:	2801      	cmp	r0, #1
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 800121c:	bf14      	ite	ne
 800121e:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
 8001220:	9803      	ldreq	r0, [sp, #12]
}
 8001222:	b005      	add	sp, #20
 8001224:	bd30      	pop	{r4, r5, pc}

08001226 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001226:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001228:	2800      	cmp	r0, #0
 800122a:	bf08      	it	eq
 800122c:	2001      	moveq	r0, #1
 800122e:	f000 fd2f 	bl	8001c90 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001232:	2000      	movs	r0, #0
 8001234:	bd08      	pop	{r3, pc}

08001236 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001236:	2200      	movs	r2, #0
 8001238:	c803      	ldmia	r0, {r0, r1}
 800123a:	f000 ba91 	b.w	8001760 <xQueueGenericCreate>

0800123e <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800123e:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001240:	f000 fe00 	bl	8001e44 <xTaskGetSchedulerState>
 8001244:	2801      	cmp	r0, #1
 8001246:	d003      	beq.n	8001250 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800124c:	f000 b8ea 	b.w	8001424 <xPortSysTickHandler>
 8001250:	bd08      	pop	{r3, pc}

08001252 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001252:	f100 0308 	add.w	r3, r0, #8
 8001256:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800125c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800125e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001260:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001262:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001264:	6003      	str	r3, [r0, #0]
 8001266:	4770      	bx	lr

08001268 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001268:	2300      	movs	r3, #0
 800126a:	6103      	str	r3, [r0, #16]
 800126c:	4770      	bx	lr

0800126e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800126e:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001270:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8001272:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001274:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800127a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800127c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800127e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001280:	3301      	adds	r3, #1
 8001282:	6003      	str	r3, [r0, #0]
 8001284:	4770      	bx	lr

08001286 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001286:	680a      	ldr	r2, [r1, #0]
{
 8001288:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800128a:	1c53      	adds	r3, r2, #1
 800128c:	d10a      	bne.n	80012a4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800128e:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001294:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001296:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001298:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800129a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800129c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800129e:	3301      	adds	r3, #1
 80012a0:	6003      	str	r3, [r0, #0]
 80012a2:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80012a4:	f100 0308 	add.w	r3, r0, #8
 80012a8:	685c      	ldr	r4, [r3, #4]
 80012aa:	6825      	ldr	r5, [r4, #0]
 80012ac:	42aa      	cmp	r2, r5
 80012ae:	d3ef      	bcc.n	8001290 <vListInsert+0xa>
 80012b0:	4623      	mov	r3, r4
 80012b2:	e7f9      	b.n	80012a8 <vListInsert+0x22>

080012b4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80012b4:	6841      	ldr	r1, [r0, #4]
 80012b6:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80012b8:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80012ba:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80012bc:	6882      	ldr	r2, [r0, #8]
 80012be:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80012c0:	6859      	ldr	r1, [r3, #4]
 80012c2:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80012c4:	bf08      	it	eq
 80012c6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80012c8:	2200      	movs	r2, #0
 80012ca:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	3801      	subs	r0, #1
 80012d0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80012d2:	4770      	bx	lr

080012d4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <prvTaskExitError+0x2c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	d008      	beq.n	80012ee <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80012dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012e0:	f383 8811 	msr	BASEPRI, r3
 80012e4:	f3bf 8f6f 	isb	sy
 80012e8:	f3bf 8f4f 	dsb	sy
 80012ec:	e7fe      	b.n	80012ec <prvTaskExitError+0x18>
 80012ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012f2:	f383 8811 	msr	BASEPRI, r3
 80012f6:	f3bf 8f6f 	isb	sy
 80012fa:	f3bf 8f4f 	dsb	sy
 80012fe:	e7fe      	b.n	80012fe <prvTaskExitError+0x2a>
 8001300:	20000000 	.word	0x20000000

08001304 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001304:	4806      	ldr	r0, [pc, #24]	; (8001320 <prvPortStartFirstTask+0x1c>)
 8001306:	6800      	ldr	r0, [r0, #0]
 8001308:	6800      	ldr	r0, [r0, #0]
 800130a:	f380 8808 	msr	MSP, r0
 800130e:	b662      	cpsie	i
 8001310:	b661      	cpsie	f
 8001312:	f3bf 8f4f 	dsb	sy
 8001316:	f3bf 8f6f 	isb	sy
 800131a:	df00      	svc	0
 800131c:	bf00      	nop
 800131e:	0000      	.short	0x0000
 8001320:	e000ed08 	.word	0xe000ed08

08001324 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001324:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001328:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800132e:	f021 0101 	bic.w	r1, r1, #1
 8001332:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001336:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800133a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800133e:	3840      	subs	r0, #64	; 0x40
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	080012d5 	.word	0x080012d5
	...

08001350 <SVC_Handler>:
	__asm volatile (
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <pxCurrentTCBConst2>)
 8001352:	6819      	ldr	r1, [r3, #0]
 8001354:	6808      	ldr	r0, [r1, #0]
 8001356:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800135a:	f380 8809 	msr	PSP, r0
 800135e:	f3bf 8f6f 	isb	sy
 8001362:	f04f 0000 	mov.w	r0, #0
 8001366:	f380 8811 	msr	BASEPRI, r0
 800136a:	f04e 0e0d 	orr.w	lr, lr, #13
 800136e:	4770      	bx	lr

08001370 <pxCurrentTCBConst2>:
 8001370:	20000d0c 	.word	0x20000d0c

08001374 <vPortEnterCritical>:
 8001374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001378:	f383 8811 	msr	BASEPRI, r3
 800137c:	f3bf 8f6f 	isb	sy
 8001380:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001384:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <vPortEnterCritical+0x3c>)
 8001386:	6813      	ldr	r3, [r2, #0]
 8001388:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800138a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800138c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800138e:	d10d      	bne.n	80013ac <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <vPortEnterCritical+0x40>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001398:	d008      	beq.n	80013ac <vPortEnterCritical+0x38>
 800139a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800139e:	f383 8811 	msr	BASEPRI, r3
 80013a2:	f3bf 8f6f 	isb	sy
 80013a6:	f3bf 8f4f 	dsb	sy
 80013aa:	e7fe      	b.n	80013aa <vPortEnterCritical+0x36>
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000000 	.word	0x20000000
 80013b4:	e000ed04 	.word	0xe000ed04

080013b8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80013b8:	4a08      	ldr	r2, [pc, #32]	; (80013dc <vPortExitCritical+0x24>)
 80013ba:	6813      	ldr	r3, [r2, #0]
 80013bc:	b943      	cbnz	r3, 80013d0 <vPortExitCritical+0x18>
 80013be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013c2:	f383 8811 	msr	BASEPRI, r3
 80013c6:	f3bf 8f6f 	isb	sy
 80013ca:	f3bf 8f4f 	dsb	sy
 80013ce:	e7fe      	b.n	80013ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80013d0:	3b01      	subs	r3, #1
 80013d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80013d4:	b90b      	cbnz	r3, 80013da <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80013d6:	f383 8811 	msr	BASEPRI, r3
 80013da:	4770      	bx	lr
 80013dc:	20000000 	.word	0x20000000

080013e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80013e0:	f3ef 8009 	mrs	r0, PSP
 80013e4:	f3bf 8f6f 	isb	sy
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <pxCurrentTCBConst>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80013f0:	6010      	str	r0, [r2, #0]
 80013f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80013f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80013fa:	f380 8811 	msr	BASEPRI, r0
 80013fe:	f000 fca5 	bl	8001d4c <vTaskSwitchContext>
 8001402:	f04f 0000 	mov.w	r0, #0
 8001406:	f380 8811 	msr	BASEPRI, r0
 800140a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800140e:	6819      	ldr	r1, [r3, #0]
 8001410:	6808      	ldr	r0, [r1, #0]
 8001412:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001416:	f380 8809 	msr	PSP, r0
 800141a:	f3bf 8f6f 	isb	sy
 800141e:	4770      	bx	lr

08001420 <pxCurrentTCBConst>:
 8001420:	20000d0c 	.word	0x20000d0c

08001424 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001424:	b508      	push	{r3, lr}
	__asm volatile
 8001426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800142a:	f383 8811 	msr	BASEPRI, r3
 800142e:	f3bf 8f6f 	isb	sy
 8001432:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001436:	f000 fb21 	bl	8001a7c <xTaskIncrementTick>
 800143a:	b118      	cbz	r0, 8001444 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800143c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001440:	4b02      	ldr	r3, [pc, #8]	; (800144c <xPortSysTickHandler+0x28>)
 8001442:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001444:	2300      	movs	r3, #0
 8001446:	f383 8811 	msr	BASEPRI, r3
 800144a:	bd08      	pop	{r3, pc}
 800144c:	e000ed04 	.word	0xe000ed04

08001450 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001450:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <vPortSetupTimerInterrupt+0x1c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	fbb3 f3f2 	udiv	r3, r3, r2
 800145c:	4a04      	ldr	r2, [pc, #16]	; (8001470 <vPortSetupTimerInterrupt+0x20>)
 800145e:	3b01      	subs	r3, #1
 8001460:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001462:	2207      	movs	r2, #7
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <vPortSetupTimerInterrupt+0x24>)
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	200000cc 	.word	0x200000cc
 8001470:	e000e014 	.word	0xe000e014
 8001474:	e000e010 	.word	0xe000e010

08001478 <xPortStartScheduler>:
{
 8001478:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800147a:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800147c:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800147e:	781a      	ldrb	r2, [r3, #0]
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001484:	22ff      	movs	r2, #255	; 0xff
 8001486:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001488:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800148a:	4a1c      	ldr	r2, [pc, #112]	; (80014fc <xPortStartScheduler+0x84>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001492:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001496:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800149a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800149c:	2207      	movs	r2, #7
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <xPortStartScheduler+0x88>)
 80014a0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80014a2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80014a6:	1e54      	subs	r4, r2, #1
 80014a8:	0600      	lsls	r0, r0, #24
 80014aa:	d41c      	bmi.n	80014e6 <xPortStartScheduler+0x6e>
 80014ac:	b101      	cbz	r1, 80014b0 <xPortStartScheduler+0x38>
 80014ae:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80014b4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80014b8:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80014ba:	9b01      	ldr	r3, [sp, #4]
 80014bc:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <xPortStartScheduler+0x80>)
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <xPortStartScheduler+0x8c>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80014ca:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80014d2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80014d4:	f7ff ffbc 	bl	8001450 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80014d8:	2200      	movs	r2, #0
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <xPortStartScheduler+0x90>)
 80014dc:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 80014de:	f7ff ff11 	bl	8001304 <prvPortStartFirstTask>
	prvTaskExitError();
 80014e2:	f7ff fef7 	bl	80012d4 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80014e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80014ea:	2101      	movs	r1, #1
 80014ec:	0052      	lsls	r2, r2, #1
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	f88d 2003 	strb.w	r2, [sp, #3]
 80014f4:	4622      	mov	r2, r4
 80014f6:	e7d4      	b.n	80014a2 <xPortStartScheduler+0x2a>
 80014f8:	e000e400 	.word	0xe000e400
 80014fc:	200000ec 	.word	0x200000ec
 8001500:	200000f0 	.word	0x200000f0
 8001504:	e000ed20 	.word	0xe000ed20
 8001508:	20000000 	.word	0x20000000

0800150c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800150c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <prvInsertBlockIntoFreeList+0x40>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4282      	cmp	r2, r0
 8001514:	d318      	bcc.n	8001548 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001516:	685c      	ldr	r4, [r3, #4]
 8001518:	1919      	adds	r1, r3, r4
 800151a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800151c:	bf01      	itttt	eq
 800151e:	6841      	ldreq	r1, [r0, #4]
 8001520:	4618      	moveq	r0, r3
 8001522:	1909      	addeq	r1, r1, r4
 8001524:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001526:	6844      	ldr	r4, [r0, #4]
 8001528:	1901      	adds	r1, r0, r4
 800152a:	428a      	cmp	r2, r1
 800152c:	d107      	bne.n	800153e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800152e:	4908      	ldr	r1, [pc, #32]	; (8001550 <prvInsertBlockIntoFreeList+0x44>)
 8001530:	6809      	ldr	r1, [r1, #0]
 8001532:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001534:	bf1f      	itttt	ne
 8001536:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001538:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800153a:	1909      	addne	r1, r1, r4
 800153c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800153e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001540:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001542:	bf18      	it	ne
 8001544:	6018      	strne	r0, [r3, #0]
 8001546:	bd10      	pop	{r4, pc}
 8001548:	4613      	mov	r3, r2
 800154a:	e7e1      	b.n	8001510 <prvInsertBlockIntoFreeList+0x4>
 800154c:	20000d04 	.word	0x20000d04
 8001550:	200000f4 	.word	0x200000f4

08001554 <pvPortMalloc>:
{
 8001554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001558:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800155a:	f000 fa87 	bl	8001a6c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800155e:	493e      	ldr	r1, [pc, #248]	; (8001658 <pvPortMalloc+0x104>)
 8001560:	4d3e      	ldr	r5, [pc, #248]	; (800165c <pvPortMalloc+0x108>)
 8001562:	680b      	ldr	r3, [r1, #0]
 8001564:	bb0b      	cbnz	r3, 80015aa <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001566:	4a3e      	ldr	r2, [pc, #248]	; (8001660 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001568:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800156a:	bf1d      	ittte	ne
 800156c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800156e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001572:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001576:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800157a:	bf1c      	itt	ne
 800157c:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800157e:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 8001580:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001582:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001584:	4e37      	ldr	r6, [pc, #220]	; (8001664 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8001586:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001588:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800158c:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800158e:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001590:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001592:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8001594:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001596:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001598:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800159a:	4b33      	ldr	r3, [pc, #204]	; (8001668 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800159c:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800159e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80015a0:	4b32      	ldr	r3, [pc, #200]	; (800166c <pvPortMalloc+0x118>)
 80015a2:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80015a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80015a8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80015aa:	682f      	ldr	r7, [r5, #0]
 80015ac:	4227      	tst	r7, r4
 80015ae:	d116      	bne.n	80015de <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80015b0:	2c00      	cmp	r4, #0
 80015b2:	d040      	beq.n	8001636 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 80015b4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80015b8:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80015ba:	bf1c      	itt	ne
 80015bc:	f023 0307 	bicne.w	r3, r3, #7
 80015c0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80015c2:	b163      	cbz	r3, 80015de <pvPortMalloc+0x8a>
 80015c4:	4a29      	ldr	r2, [pc, #164]	; (800166c <pvPortMalloc+0x118>)
 80015c6:	6816      	ldr	r6, [r2, #0]
 80015c8:	4690      	mov	r8, r2
 80015ca:	42b3      	cmp	r3, r6
 80015cc:	d807      	bhi.n	80015de <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80015ce:	4a25      	ldr	r2, [pc, #148]	; (8001664 <pvPortMalloc+0x110>)
 80015d0:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80015d2:	6868      	ldr	r0, [r5, #4]
 80015d4:	4283      	cmp	r3, r0
 80015d6:	d804      	bhi.n	80015e2 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80015d8:	6809      	ldr	r1, [r1, #0]
 80015da:	428d      	cmp	r5, r1
 80015dc:	d107      	bne.n	80015ee <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80015de:	2400      	movs	r4, #0
 80015e0:	e029      	b.n	8001636 <pvPortMalloc+0xe2>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80015e2:	682c      	ldr	r4, [r5, #0]
 80015e4:	2c00      	cmp	r4, #0
 80015e6:	d0f7      	beq.n	80015d8 <pvPortMalloc+0x84>
 80015e8:	462a      	mov	r2, r5
 80015ea:	4625      	mov	r5, r4
 80015ec:	e7f1      	b.n	80015d2 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80015ee:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80015f0:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80015f2:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80015f4:	1ac2      	subs	r2, r0, r3
 80015f6:	2a10      	cmp	r2, #16
 80015f8:	d90f      	bls.n	800161a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80015fa:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80015fc:	0741      	lsls	r1, r0, #29
 80015fe:	d008      	beq.n	8001612 <pvPortMalloc+0xbe>
	__asm volatile
 8001600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001604:	f383 8811 	msr	BASEPRI, r3
 8001608:	f3bf 8f6f 	isb	sy
 800160c:	f3bf 8f4f 	dsb	sy
 8001610:	e7fe      	b.n	8001610 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001612:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001614:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001616:	f7ff ff79 	bl	800150c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800161a:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800161c:	4912      	ldr	r1, [pc, #72]	; (8001668 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800161e:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001620:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 8001622:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001624:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001626:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800162a:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800162c:	bf38      	it	cc
 800162e:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001630:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001632:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001634:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001636:	f000 fab3 	bl	8001ba0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800163a:	0763      	lsls	r3, r4, #29
 800163c:	d008      	beq.n	8001650 <pvPortMalloc+0xfc>
 800163e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001642:	f383 8811 	msr	BASEPRI, r3
 8001646:	f3bf 8f6f 	isb	sy
 800164a:	f3bf 8f4f 	dsb	sy
 800164e:	e7fe      	b.n	800164e <pvPortMalloc+0xfa>
}
 8001650:	4620      	mov	r0, r4
 8001652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001656:	bf00      	nop
 8001658:	200000f4 	.word	0x200000f4
 800165c:	20000cf8 	.word	0x20000cf8
 8001660:	200000f8 	.word	0x200000f8
 8001664:	20000d04 	.word	0x20000d04
 8001668:	20000d00 	.word	0x20000d00
 800166c:	20000cfc 	.word	0x20000cfc

08001670 <vPortFree>:
{
 8001670:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001672:	4604      	mov	r4, r0
 8001674:	b370      	cbz	r0, 80016d4 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001676:	4a18      	ldr	r2, [pc, #96]	; (80016d8 <vPortFree+0x68>)
 8001678:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	4213      	tst	r3, r2
 8001680:	d108      	bne.n	8001694 <vPortFree+0x24>
 8001682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001686:	f383 8811 	msr	BASEPRI, r3
 800168a:	f3bf 8f6f 	isb	sy
 800168e:	f3bf 8f4f 	dsb	sy
 8001692:	e7fe      	b.n	8001692 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001694:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001698:	b141      	cbz	r1, 80016ac <vPortFree+0x3c>
 800169a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800169e:	f383 8811 	msr	BASEPRI, r3
 80016a2:	f3bf 8f6f 	isb	sy
 80016a6:	f3bf 8f4f 	dsb	sy
 80016aa:	e7fe      	b.n	80016aa <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80016ac:	ea23 0302 	bic.w	r3, r3, r2
 80016b0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80016b4:	f000 f9da 	bl	8001a6c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80016b8:	4a08      	ldr	r2, [pc, #32]	; (80016dc <vPortFree+0x6c>)
 80016ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80016be:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80016c0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80016c4:	440b      	add	r3, r1
 80016c6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80016c8:	f7ff ff20 	bl	800150c <prvInsertBlockIntoFreeList>
}
 80016cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80016d0:	f000 ba66 	b.w	8001ba0 <xTaskResumeAll>
 80016d4:	bd10      	pop	{r4, pc}
 80016d6:	bf00      	nop
 80016d8:	20000cf8 	.word	0x20000cf8
 80016dc:	20000cfc 	.word	0x20000cfc

080016e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80016e0:	b538      	push	{r3, r4, r5, lr}
 80016e2:	460d      	mov	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80016e4:	4604      	mov	r4, r0
 80016e6:	b940      	cbnz	r0, 80016fa <xQueueGenericReset+0x1a>
 80016e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ec:	f383 8811 	msr	BASEPRI, r3
 80016f0:	f3bf 8f6f 	isb	sy
 80016f4:	f3bf 8f4f 	dsb	sy
 80016f8:	e7fe      	b.n	80016f8 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 80016fa:	f7ff fe3b 	bl	8001374 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80016fe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001700:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001702:	6822      	ldr	r2, [r4, #0]
 8001704:	4343      	muls	r3, r0
 8001706:	18d1      	adds	r1, r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001708:	1a1b      	subs	r3, r3, r0
 800170a:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800170c:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800170e:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001710:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8001712:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001714:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001716:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8001718:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800171c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001720:	b995      	cbnz	r5, 8001748 <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001722:	6923      	ldr	r3, [r4, #16]
 8001724:	b163      	cbz	r3, 8001740 <xQueueGenericReset+0x60>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001726:	f104 0010 	add.w	r0, r4, #16
 800172a:	f000 fb49 	bl	8001dc0 <xTaskRemoveFromEventList>
 800172e:	b138      	cbz	r0, 8001740 <xQueueGenericReset+0x60>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <xQueueGenericReset+0x7c>)
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	f3bf 8f4f 	dsb	sy
 800173c:	f3bf 8f6f 	isb	sy
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
 8001740:	f7ff fe3a 	bl	80013b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8001744:	2001      	movs	r0, #1
 8001746:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001748:	f104 0010 	add.w	r0, r4, #16
 800174c:	f7ff fd81 	bl	8001252 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001750:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001754:	f7ff fd7d 	bl	8001252 <vListInitialise>
 8001758:	e7f2      	b.n	8001740 <xQueueGenericReset+0x60>
 800175a:	bf00      	nop
 800175c:	e000ed04 	.word	0xe000ed04

08001760 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001760:	b570      	push	{r4, r5, r6, lr}
 8001762:	460d      	mov	r5, r1
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001764:	4606      	mov	r6, r0
 8001766:	b940      	cbnz	r0, 800177a <xQueueGenericCreate+0x1a>
 8001768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800176c:	f383 8811 	msr	BASEPRI, r3
 8001770:	f3bf 8f6f 	isb	sy
 8001774:	f3bf 8f4f 	dsb	sy
 8001778:	e7fe      	b.n	8001778 <xQueueGenericCreate+0x18>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800177a:	4348      	muls	r0, r1
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800177c:	3048      	adds	r0, #72	; 0x48
 800177e:	f7ff fee9 	bl	8001554 <pvPortMalloc>

		if( pxNewQueue != NULL )
 8001782:	4604      	mov	r4, r0
 8001784:	b138      	cbz	r0, 8001796 <xQueueGenericCreate+0x36>
{
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001786:	b945      	cbnz	r5, 800179a <xQueueGenericCreate+0x3a>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001788:	6020      	str	r0, [r4, #0]
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800178a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800178c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800178e:	2101      	movs	r1, #1
 8001790:	4620      	mov	r0, r4
 8001792:	f7ff ffa5 	bl	80016e0 <xQueueGenericReset>
	}
 8001796:	4620      	mov	r0, r4
 8001798:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800179a:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800179e:	6003      	str	r3, [r0, #0]
 80017a0:	e7f3      	b.n	800178a <xQueueGenericCreate+0x2a>
	...

080017a4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017a4:	4a06      	ldr	r2, [pc, #24]	; (80017c0 <prvResetNextTaskUnblockTime+0x1c>)
 80017a6:	6813      	ldr	r3, [r2, #0]
 80017a8:	6819      	ldr	r1, [r3, #0]
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <prvResetNextTaskUnblockTime+0x20>)
 80017ac:	b919      	cbnz	r1, 80017b6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80017ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80017ba:	68d2      	ldr	r2, [r2, #12]
 80017bc:	6852      	ldr	r2, [r2, #4]
 80017be:	e7f8      	b.n	80017b2 <prvResetNextTaskUnblockTime+0xe>
 80017c0:	20000d10 	.word	0x20000d10
 80017c4:	20000de8 	.word	0x20000de8

080017c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80017c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80017cc:	4e1b      	ldr	r6, [pc, #108]	; (800183c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80017ce:	681d      	ldr	r5, [r3, #0]
{
 80017d0:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80017d2:	6830      	ldr	r0, [r6, #0]
{
 80017d4:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80017d6:	3004      	adds	r0, #4
 80017d8:	f7ff fd6c 	bl	80012b4 <uxListRemove>
 80017dc:	4633      	mov	r3, r6
 80017de:	b940      	cbnz	r0, 80017f2 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80017e0:	2001      	movs	r0, #1
 80017e2:	6831      	ldr	r1, [r6, #0]
 80017e4:	4e16      	ldr	r6, [pc, #88]	; (8001840 <prvAddCurrentTaskToDelayedList+0x78>)
 80017e6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80017e8:	6832      	ldr	r2, [r6, #0]
 80017ea:	4088      	lsls	r0, r1
 80017ec:	ea22 0200 	bic.w	r2, r2, r0
 80017f0:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80017f2:	1c62      	adds	r2, r4, #1
 80017f4:	d107      	bne.n	8001806 <prvAddCurrentTaskToDelayedList+0x3e>
 80017f6:	b137      	cbz	r7, 8001806 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80017f8:	6819      	ldr	r1, [r3, #0]
 80017fa:	4812      	ldr	r0, [pc, #72]	; (8001844 <prvAddCurrentTaskToDelayedList+0x7c>)
 80017fc:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80017fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001802:	f7ff bd34 	b.w	800126e <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001806:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001808:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800180a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800180c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800180e:	d907      	bls.n	8001820 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001810:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <prvAddCurrentTaskToDelayedList+0x80>)
 8001812:	6810      	ldr	r0, [r2, #0]
 8001814:	6819      	ldr	r1, [r3, #0]
}
 8001816:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800181a:	3104      	adds	r1, #4
 800181c:	f7ff bd33 	b.w	8001286 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001820:	4a0a      	ldr	r2, [pc, #40]	; (800184c <prvAddCurrentTaskToDelayedList+0x84>)
 8001822:	6810      	ldr	r0, [r2, #0]
 8001824:	6819      	ldr	r1, [r3, #0]
 8001826:	3104      	adds	r1, #4
 8001828:	f7ff fd2d 	bl	8001286 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <prvAddCurrentTaskToDelayedList+0x88>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001832:	bf38      	it	cc
 8001834:	601c      	strcc	r4, [r3, #0]
 8001836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001838:	20000e30 	.word	0x20000e30
 800183c:	20000d0c 	.word	0x20000d0c
 8001840:	20000db8 	.word	0x20000db8
 8001844:	20000e08 	.word	0x20000e08
 8001848:	20000d14 	.word	0x20000d14
 800184c:	20000d10 	.word	0x20000d10
 8001850:	20000de8 	.word	0x20000de8

08001854 <xTaskCreate>:
	{
 8001854:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001858:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 800185c:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800185e:	4650      	mov	r0, sl
	{
 8001860:	460f      	mov	r7, r1
 8001862:	4699      	mov	r9, r3
 8001864:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001866:	f7ff fe75 	bl	8001554 <pvPortMalloc>
			if( pxStack != NULL )
 800186a:	4605      	mov	r5, r0
 800186c:	2800      	cmp	r0, #0
 800186e:	f000 8096 	beq.w	800199e <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001872:	2054      	movs	r0, #84	; 0x54
 8001874:	f7ff fe6e 	bl	8001554 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001878:	4604      	mov	r4, r0
 800187a:	2800      	cmp	r0, #0
 800187c:	f000 808c 	beq.w	8001998 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001880:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001884:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001886:	4455      	add	r5, sl
 8001888:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800188a:	f025 0a07 	bic.w	sl, r5, #7
 800188e:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8001892:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001894:	7859      	ldrb	r1, [r3, #1]
 8001896:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800189a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800189e:	b109      	cbz	r1, 80018a4 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80018a0:	42bb      	cmp	r3, r7
 80018a2:	d1f7      	bne.n	8001894 <xTaskCreate+0x40>
 80018a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80018a6:	f04f 0b00 	mov.w	fp, #0
 80018aa:	2d06      	cmp	r5, #6
 80018ac:	bf28      	it	cs
 80018ae:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80018b0:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 80018b2:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80018b4:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80018b6:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80018b8:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80018bc:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80018c0:	f7ff fcd2 	bl	8001268 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018c4:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80018c8:	f104 0018 	add.w	r0, r4, #24
 80018cc:	f7ff fccc 	bl	8001268 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80018d0:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80018d4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018d6:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80018d8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80018da:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80018de:	464a      	mov	r2, r9
 80018e0:	4641      	mov	r1, r8
 80018e2:	4650      	mov	r0, sl
 80018e4:	f7ff fd1e 	bl	8001324 <pxPortInitialiseStack>
 80018e8:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80018ea:	b106      	cbz	r6, 80018ee <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80018ec:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80018ee:	f7ff fd41 	bl	8001374 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80018f2:	4b32      	ldr	r3, [pc, #200]	; (80019bc <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80018f4:	4e32      	ldr	r6, [pc, #200]	; (80019c0 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80019ec <xTaskCreate+0x198>
 80018fc:	3201      	adds	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001900:	6835      	ldr	r5, [r6, #0]
 8001902:	2d00      	cmp	r5, #0
 8001904:	d14e      	bne.n	80019a4 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8001906:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d11d      	bne.n	800194a <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800190e:	eb08 0005 	add.w	r0, r8, r5
 8001912:	3514      	adds	r5, #20
 8001914:	f7ff fc9d 	bl	8001252 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001918:	2d8c      	cmp	r5, #140	; 0x8c
 800191a:	d1f8      	bne.n	800190e <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 800191c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80019f0 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8001920:	4d28      	ldr	r5, [pc, #160]	; (80019c4 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8001922:	4648      	mov	r0, r9
 8001924:	f7ff fc95 	bl	8001252 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001928:	4628      	mov	r0, r5
 800192a:	f7ff fc92 	bl	8001252 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800192e:	4826      	ldr	r0, [pc, #152]	; (80019c8 <xTaskCreate+0x174>)
 8001930:	f7ff fc8f 	bl	8001252 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001934:	4825      	ldr	r0, [pc, #148]	; (80019cc <xTaskCreate+0x178>)
 8001936:	f7ff fc8c 	bl	8001252 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800193a:	4825      	ldr	r0, [pc, #148]	; (80019d0 <xTaskCreate+0x17c>)
 800193c:	f7ff fc89 	bl	8001252 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001940:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <xTaskCreate+0x180>)
 8001942:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001946:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <xTaskCreate+0x184>)
 8001948:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800194a:	2501      	movs	r5, #1
		uxTaskNumber++;
 800194c:	4a23      	ldr	r2, [pc, #140]	; (80019dc <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 800194e:	4924      	ldr	r1, [pc, #144]	; (80019e0 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8001950:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001952:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001954:	3301      	adds	r3, #1
 8001956:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001958:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800195a:	fa05 f302 	lsl.w	r3, r5, r2
 800195e:	4303      	orrs	r3, r0
 8001960:	2014      	movs	r0, #20
 8001962:	600b      	str	r3, [r1, #0]
 8001964:	fb00 8002 	mla	r0, r0, r2, r8
 8001968:	4639      	mov	r1, r7
 800196a:	f7ff fc80 	bl	800126e <vListInsertEnd>
	taskEXIT_CRITICAL();
 800196e:	f7ff fd23 	bl	80013b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001972:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <xTaskCreate+0x190>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b163      	cbz	r3, 8001992 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001978:	6833      	ldr	r3, [r6, #0]
 800197a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800197c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800197e:	429a      	cmp	r2, r3
 8001980:	d207      	bcs.n	8001992 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8001982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001986:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <xTaskCreate+0x194>)
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	f3bf 8f4f 	dsb	sy
 800198e:	f3bf 8f6f 	isb	sy
	}
 8001992:	4628      	mov	r0, r5
 8001994:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001998:	4628      	mov	r0, r5
 800199a:	f7ff fe69 	bl	8001670 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800199e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80019a2:	e7f6      	b.n	8001992 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <xTaskCreate+0x190>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1ce      	bne.n	800194a <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80019ac:	6833      	ldr	r3, [r6, #0]
 80019ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019b2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80019b4:	bf98      	it	ls
 80019b6:	6034      	strls	r4, [r6, #0]
 80019b8:	e7c7      	b.n	800194a <xTaskCreate+0xf6>
 80019ba:	bf00      	nop
 80019bc:	20000da4 	.word	0x20000da4
 80019c0:	20000d0c 	.word	0x20000d0c
 80019c4:	20000dd0 	.word	0x20000dd0
 80019c8:	20000df0 	.word	0x20000df0
 80019cc:	20000e1c 	.word	0x20000e1c
 80019d0:	20000e08 	.word	0x20000e08
 80019d4:	20000d10 	.word	0x20000d10
 80019d8:	20000d14 	.word	0x20000d14
 80019dc:	20000db4 	.word	0x20000db4
 80019e0:	20000db8 	.word	0x20000db8
 80019e4:	20000e04 	.word	0x20000e04
 80019e8:	e000ed04 	.word	0xe000ed04
 80019ec:	20000d18 	.word	0x20000d18
 80019f0:	20000dbc 	.word	0x20000dbc

080019f4 <vTaskStartScheduler>:
{
 80019f4:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80019f6:	2400      	movs	r4, #0
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <vTaskStartScheduler+0x60>)
 80019fa:	9400      	str	r4, [sp, #0]
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	2280      	movs	r2, #128	; 0x80
 8001a00:	4623      	mov	r3, r4
 8001a02:	4915      	ldr	r1, [pc, #84]	; (8001a58 <vTaskStartScheduler+0x64>)
 8001a04:	4815      	ldr	r0, [pc, #84]	; (8001a5c <vTaskStartScheduler+0x68>)
 8001a06:	f7ff ff25 	bl	8001854 <xTaskCreate>
	if( xReturn == pdPASS )
 8001a0a:	2801      	cmp	r0, #1
 8001a0c:	d114      	bne.n	8001a38 <vTaskStartScheduler+0x44>
 8001a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a12:	f383 8811 	msr	BASEPRI, r3
 8001a16:	f3bf 8f6f 	isb	sy
 8001a1a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <vTaskStartScheduler+0x6c>)
 8001a24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <vTaskStartScheduler+0x70>)
 8001a28:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <vTaskStartScheduler+0x74>)
 8001a2c:	601c      	str	r4, [r3, #0]
}
 8001a2e:	b002      	add	sp, #8
 8001a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001a34:	f7ff bd20 	b.w	8001478 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001a38:	3001      	adds	r0, #1
 8001a3a:	d108      	bne.n	8001a4e <vTaskStartScheduler+0x5a>
 8001a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a40:	f383 8811 	msr	BASEPRI, r3
 8001a44:	f3bf 8f6f 	isb	sy
 8001a48:	f3bf 8f4f 	dsb	sy
 8001a4c:	e7fe      	b.n	8001a4c <vTaskStartScheduler+0x58>
}
 8001a4e:	b002      	add	sp, #8
 8001a50:	bd10      	pop	{r4, pc}
 8001a52:	bf00      	nop
 8001a54:	20000de4 	.word	0x20000de4
 8001a58:	080029cf 	.word	0x080029cf
 8001a5c:	08001cd9 	.word	0x08001cd9
 8001a60:	20000de8 	.word	0x20000de8
 8001a64:	20000e04 	.word	0x20000e04
 8001a68:	20000e30 	.word	0x20000e30

08001a6c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001a6c:	4a02      	ldr	r2, [pc, #8]	; (8001a78 <vTaskSuspendAll+0xc>)
 8001a6e:	6813      	ldr	r3, [r2, #0]
 8001a70:	3301      	adds	r3, #1
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000db0 	.word	0x20000db0

08001a7c <xTaskIncrementTick>:
{
 8001a7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a80:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <xTaskIncrementTick+0xf8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d153      	bne.n	8001b30 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8001a88:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <xTaskIncrementTick+0xfc>)
 8001a8a:	681c      	ldr	r4, [r3, #0]
 8001a8c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001a8e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8001a90:	b9bc      	cbnz	r4, 8001ac2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001a92:	4b3a      	ldr	r3, [pc, #232]	; (8001b7c <xTaskIncrementTick+0x100>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	b142      	cbz	r2, 8001aac <xTaskIncrementTick+0x30>
 8001a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a9e:	f383 8811 	msr	BASEPRI, r3
 8001aa2:	f3bf 8f6f 	isb	sy
 8001aa6:	f3bf 8f4f 	dsb	sy
 8001aaa:	e7fe      	b.n	8001aaa <xTaskIncrementTick+0x2e>
 8001aac:	4a34      	ldr	r2, [pc, #208]	; (8001b80 <xTaskIncrementTick+0x104>)
 8001aae:	6819      	ldr	r1, [r3, #0]
 8001ab0:	6810      	ldr	r0, [r2, #0]
 8001ab2:	6018      	str	r0, [r3, #0]
 8001ab4:	6011      	str	r1, [r2, #0]
 8001ab6:	4a33      	ldr	r2, [pc, #204]	; (8001b84 <xTaskIncrementTick+0x108>)
 8001ab8:	6813      	ldr	r3, [r2, #0]
 8001aba:	3301      	adds	r3, #1
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	f7ff fe71 	bl	80017a4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001ac2:	4d31      	ldr	r5, [pc, #196]	; (8001b88 <xTaskIncrementTick+0x10c>)
 8001ac4:	f04f 0b00 	mov.w	fp, #0
 8001ac8:	682b      	ldr	r3, [r5, #0]
 8001aca:	4f30      	ldr	r7, [pc, #192]	; (8001b8c <xTaskIncrementTick+0x110>)
 8001acc:	429c      	cmp	r4, r3
 8001ace:	d33e      	bcc.n	8001b4e <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ad0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001b7c <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001ad4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001b9c <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ad8:	f8d8 2000 	ldr.w	r2, [r8]
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	bb72      	cbnz	r2, 8001b3e <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ae4:	602a      	str	r2, [r5, #0]
					break;
 8001ae6:	e032      	b.n	8001b4e <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ae8:	f106 0a04 	add.w	sl, r6, #4
 8001aec:	4650      	mov	r0, sl
 8001aee:	f7ff fbe1 	bl	80012b4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001af2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001af4:	b119      	cbz	r1, 8001afe <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001af6:	f106 0018 	add.w	r0, r6, #24
 8001afa:	f7ff fbdb 	bl	80012b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001afe:	2201      	movs	r2, #1
 8001b00:	f04f 0e14 	mov.w	lr, #20
 8001b04:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001b06:	f8d9 3000 	ldr.w	r3, [r9]
 8001b0a:	fa02 f100 	lsl.w	r1, r2, r0
 8001b0e:	4319      	orrs	r1, r3
 8001b10:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <xTaskIncrementTick+0x114>)
 8001b12:	f8c9 1000 	str.w	r1, [r9]
 8001b16:	fb0e 3000 	mla	r0, lr, r0, r3
 8001b1a:	4651      	mov	r1, sl
 8001b1c:	f7ff fba7 	bl	800126e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b20:	6838      	ldr	r0, [r7, #0]
 8001b22:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001b24:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001b26:	4291      	cmp	r1, r2
 8001b28:	bf28      	it	cs
 8001b2a:	f04f 0b01 	movcs.w	fp, #1
 8001b2e:	e7d3      	b.n	8001ad8 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001b30:	4a18      	ldr	r2, [pc, #96]	; (8001b94 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8001b32:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8001b36:	6813      	ldr	r3, [r2, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	e011      	b.n	8001b62 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001b3e:	f8d8 2000 	ldr.w	r2, [r8]
 8001b42:	68d2      	ldr	r2, [r2, #12]
 8001b44:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001b46:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001b48:	428c      	cmp	r4, r1
 8001b4a:	d2cd      	bcs.n	8001ae8 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001b4c:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <xTaskIncrementTick+0x114>)
 8001b52:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b54:	2214      	movs	r2, #20
 8001b56:	434a      	muls	r2, r1
 8001b58:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001b5a:	2a02      	cmp	r2, #2
 8001b5c:	bf28      	it	cs
 8001b5e:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001b62:	4a0d      	ldr	r2, [pc, #52]	; (8001b98 <xTaskIncrementTick+0x11c>)
 8001b64:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001b66:	2a00      	cmp	r2, #0
 8001b68:	bf18      	it	ne
 8001b6a:	f04f 0b01 	movne.w	fp, #1
}
 8001b6e:	4658      	mov	r0, fp
 8001b70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b74:	20000db0 	.word	0x20000db0
 8001b78:	20000e30 	.word	0x20000e30
 8001b7c:	20000d10 	.word	0x20000d10
 8001b80:	20000d14 	.word	0x20000d14
 8001b84:	20000dec 	.word	0x20000dec
 8001b88:	20000de8 	.word	0x20000de8
 8001b8c:	20000d0c 	.word	0x20000d0c
 8001b90:	20000d18 	.word	0x20000d18
 8001b94:	20000dac 	.word	0x20000dac
 8001b98:	20000e34 	.word	0x20000e34
 8001b9c:	20000db8 	.word	0x20000db8

08001ba0 <xTaskResumeAll>:
{
 8001ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001ba4:	4c31      	ldr	r4, [pc, #196]	; (8001c6c <xTaskResumeAll+0xcc>)
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	b943      	cbnz	r3, 8001bbc <xTaskResumeAll+0x1c>
 8001baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bae:	f383 8811 	msr	BASEPRI, r3
 8001bb2:	f3bf 8f6f 	isb	sy
 8001bb6:	f3bf 8f4f 	dsb	sy
 8001bba:	e7fe      	b.n	8001bba <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001bbc:	f7ff fbda 	bl	8001374 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bc6:	6824      	ldr	r4, [r4, #0]
 8001bc8:	b12c      	cbz	r4, 8001bd6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001bca:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001bcc:	f7ff fbf4 	bl	80013b8 <vPortExitCritical>
}
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <xTaskResumeAll+0xd0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f5      	beq.n	8001bca <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001bde:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001c88 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8001be2:	4f24      	ldr	r7, [pc, #144]	; (8001c74 <xTaskResumeAll+0xd4>)
 8001be4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001c8c <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001be8:	f8d9 3000 	ldr.w	r3, [r9]
 8001bec:	b9e3      	cbnz	r3, 8001c28 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8001bee:	b10c      	cbz	r4, 8001bf4 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8001bf0:	f7ff fdd8 	bl	80017a4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001bf4:	4d20      	ldr	r5, [pc, #128]	; (8001c78 <xTaskResumeAll+0xd8>)
 8001bf6:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001bf8:	b144      	cbz	r4, 8001c0c <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8001bfa:	2701      	movs	r7, #1
 8001bfc:	4e1f      	ldr	r6, [pc, #124]	; (8001c7c <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 8001bfe:	f7ff ff3d 	bl	8001a7c <xTaskIncrementTick>
 8001c02:	b100      	cbz	r0, 8001c06 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001c04:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001c06:	3c01      	subs	r4, #1
 8001c08:	d1f9      	bne.n	8001bfe <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8001c0a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <xTaskResumeAll+0xdc>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0da      	beq.n	8001bca <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <xTaskResumeAll+0xe0>)
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	f3bf 8f4f 	dsb	sy
 8001c20:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001c24:	2401      	movs	r4, #1
 8001c26:	e7d1      	b.n	8001bcc <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001c28:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8001c2c:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001c2e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c30:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c32:	f104 0018 	add.w	r0, r4, #24
 8001c36:	f7ff fb3d 	bl	80012b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c3a:	4630      	mov	r0, r6
 8001c3c:	f7ff fb3a 	bl	80012b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001c40:	2014      	movs	r0, #20
 8001c42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c44:	6839      	ldr	r1, [r7, #0]
 8001c46:	fa05 f302 	lsl.w	r3, r5, r2
 8001c4a:	430b      	orrs	r3, r1
 8001c4c:	fb00 8002 	mla	r0, r0, r2, r8
 8001c50:	4631      	mov	r1, r6
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	f7ff fb0b 	bl	800126e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <xTaskResumeAll+0xe4>)
 8001c5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8001c62:	bf24      	itt	cs
 8001c64:	4b05      	ldrcs	r3, [pc, #20]	; (8001c7c <xTaskResumeAll+0xdc>)
 8001c66:	601d      	strcs	r5, [r3, #0]
 8001c68:	e7be      	b.n	8001be8 <xTaskResumeAll+0x48>
 8001c6a:	bf00      	nop
 8001c6c:	20000db0 	.word	0x20000db0
 8001c70:	20000da4 	.word	0x20000da4
 8001c74:	20000db8 	.word	0x20000db8
 8001c78:	20000dac 	.word	0x20000dac
 8001c7c:	20000e34 	.word	0x20000e34
 8001c80:	e000ed04 	.word	0xe000ed04
 8001c84:	20000d0c 	.word	0x20000d0c
 8001c88:	20000df0 	.word	0x20000df0
 8001c8c:	20000d18 	.word	0x20000d18

08001c90 <vTaskDelay>:
	{
 8001c90:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001c92:	b940      	cbnz	r0, 8001ca6 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c98:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <vTaskDelay+0x40>)
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	f3bf 8f4f 	dsb	sy
 8001ca0:	f3bf 8f6f 	isb	sy
 8001ca4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <vTaskDelay+0x44>)
 8001ca8:	6819      	ldr	r1, [r3, #0]
 8001caa:	b141      	cbz	r1, 8001cbe <vTaskDelay+0x2e>
 8001cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb0:	f383 8811 	msr	BASEPRI, r3
 8001cb4:	f3bf 8f6f 	isb	sy
 8001cb8:	f3bf 8f4f 	dsb	sy
 8001cbc:	e7fe      	b.n	8001cbc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001cbe:	f7ff fed5 	bl	8001a6c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001cc2:	f7ff fd81 	bl	80017c8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001cc6:	f7ff ff6b 	bl	8001ba0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	d0e2      	beq.n	8001c94 <vTaskDelay+0x4>
 8001cce:	bd08      	pop	{r3, pc}
 8001cd0:	e000ed04 	.word	0xe000ed04
 8001cd4:	20000db0 	.word	0x20000db0

08001cd8 <prvIdleTask>:
{
 8001cd8:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001cda:	4e17      	ldr	r6, [pc, #92]	; (8001d38 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001cdc:	4c17      	ldr	r4, [pc, #92]	; (8001d3c <prvIdleTask+0x64>)
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	b963      	cbnz	r3, 8001cfc <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001ce2:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <prvIdleTask+0x68>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d9f8      	bls.n	8001cdc <prvIdleTask+0x4>
				taskYIELD();
 8001cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <prvIdleTask+0x6c>)
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	f3bf 8f4f 	dsb	sy
 8001cf6:	f3bf 8f6f 	isb	sy
 8001cfa:	e7ef      	b.n	8001cdc <prvIdleTask+0x4>
			vTaskSuspendAll();
 8001cfc:	f7ff feb6 	bl	8001a6c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001d00:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8001d02:	f7ff ff4d 	bl	8001ba0 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8001d06:	2d00      	cmp	r5, #0
 8001d08:	d0e9      	beq.n	8001cde <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8001d0a:	f7ff fb33 	bl	8001374 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001d0e:	68f3      	ldr	r3, [r6, #12]
 8001d10:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d12:	1d28      	adds	r0, r5, #4
 8001d14:	f7ff face 	bl	80012b4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001d18:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <prvIdleTask+0x70>)
 8001d1a:	6813      	ldr	r3, [r2, #0]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001d20:	6823      	ldr	r3, [r4, #0]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8001d26:	f7ff fb47 	bl	80013b8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8001d2a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001d2c:	f7ff fca0 	bl	8001670 <vPortFree>
			vPortFree( pxTCB );
 8001d30:	4628      	mov	r0, r5
 8001d32:	f7ff fc9d 	bl	8001670 <vPortFree>
 8001d36:	e7d2      	b.n	8001cde <prvIdleTask+0x6>
 8001d38:	20000e1c 	.word	0x20000e1c
 8001d3c:	20000da8 	.word	0x20000da8
 8001d40:	20000d18 	.word	0x20000d18
 8001d44:	e000ed04 	.word	0xe000ed04
 8001d48:	20000da4 	.word	0x20000da4

08001d4c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001d4c:	4b17      	ldr	r3, [pc, #92]	; (8001dac <vTaskSwitchContext+0x60>)
{
 8001d4e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <vTaskSwitchContext+0x64>)
 8001d54:	b112      	cbz	r2, 8001d5c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8001d56:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001d5c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <vTaskSwitchContext+0x68>)
 8001d60:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	2214      	movs	r2, #20
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	f1c3 031f 	rsb	r3, r3, #31
 8001d6e:	435a      	muls	r2, r3
 8001d70:	4911      	ldr	r1, [pc, #68]	; (8001db8 <vTaskSwitchContext+0x6c>)
 8001d72:	588c      	ldr	r4, [r1, r2]
 8001d74:	1888      	adds	r0, r1, r2
 8001d76:	b944      	cbnz	r4, 8001d8a <vTaskSwitchContext+0x3e>
	__asm volatile
 8001d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d7c:	f383 8811 	msr	BASEPRI, r3
 8001d80:	f3bf 8f6f 	isb	sy
 8001d84:	f3bf 8f4f 	dsb	sy
 8001d88:	e7fe      	b.n	8001d88 <vTaskSwitchContext+0x3c>
 8001d8a:	6844      	ldr	r4, [r0, #4]
 8001d8c:	3208      	adds	r2, #8
 8001d8e:	6864      	ldr	r4, [r4, #4]
 8001d90:	440a      	add	r2, r1
 8001d92:	4294      	cmp	r4, r2
 8001d94:	bf08      	it	eq
 8001d96:	6862      	ldreq	r2, [r4, #4]
 8001d98:	6044      	str	r4, [r0, #4]
 8001d9a:	bf08      	it	eq
 8001d9c:	6042      	streq	r2, [r0, #4]
 8001d9e:	2214      	movs	r2, #20
 8001da0:	fb02 1303 	mla	r3, r2, r3, r1
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <vTaskSwitchContext+0x70>)
 8001daa:	e7d5      	b.n	8001d58 <vTaskSwitchContext+0xc>
 8001dac:	20000db0 	.word	0x20000db0
 8001db0:	20000e34 	.word	0x20000e34
 8001db4:	20000db8 	.word	0x20000db8
 8001db8:	20000d18 	.word	0x20000d18
 8001dbc:	20000d0c 	.word	0x20000d0c

08001dc0 <xTaskRemoveFromEventList>:
{
 8001dc0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001dc2:	68c3      	ldr	r3, [r0, #12]
 8001dc4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8001dc6:	b944      	cbnz	r4, 8001dda <xTaskRemoveFromEventList+0x1a>
 8001dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dcc:	f383 8811 	msr	BASEPRI, r3
 8001dd0:	f3bf 8f6f 	isb	sy
 8001dd4:	f3bf 8f4f 	dsb	sy
 8001dd8:	e7fe      	b.n	8001dd8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001dda:	f104 0518 	add.w	r5, r4, #24
 8001dde:	4628      	mov	r0, r5
 8001de0:	f7ff fa68 	bl	80012b4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <xTaskRemoveFromEventList+0x6c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	b9e3      	cbnz	r3, 8001e24 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001dea:	1d25      	adds	r5, r4, #4
 8001dec:	4628      	mov	r0, r5
 8001dee:	f7ff fa61 	bl	80012b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001df2:	2301      	movs	r3, #1
 8001df4:	490e      	ldr	r1, [pc, #56]	; (8001e30 <xTaskRemoveFromEventList+0x70>)
 8001df6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001df8:	6808      	ldr	r0, [r1, #0]
 8001dfa:	4093      	lsls	r3, r2
 8001dfc:	4303      	orrs	r3, r0
 8001dfe:	2014      	movs	r0, #20
 8001e00:	600b      	str	r3, [r1, #0]
 8001e02:	4629      	mov	r1, r5
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <xTaskRemoveFromEventList+0x74>)
 8001e06:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001e0a:	f7ff fa30 	bl	800126e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <xTaskRemoveFromEventList+0x78>)
 8001e10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8001e18:	bf85      	ittet	hi
 8001e1a:	2001      	movhi	r0, #1
 8001e1c:	4b07      	ldrhi	r3, [pc, #28]	; (8001e3c <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8001e1e:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8001e20:	6018      	strhi	r0, [r3, #0]
}
 8001e22:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001e24:	4629      	mov	r1, r5
 8001e26:	4806      	ldr	r0, [pc, #24]	; (8001e40 <xTaskRemoveFromEventList+0x80>)
 8001e28:	e7ef      	b.n	8001e0a <xTaskRemoveFromEventList+0x4a>
 8001e2a:	bf00      	nop
 8001e2c:	20000db0 	.word	0x20000db0
 8001e30:	20000db8 	.word	0x20000db8
 8001e34:	20000d18 	.word	0x20000d18
 8001e38:	20000d0c 	.word	0x20000d0c
 8001e3c:	20000e34 	.word	0x20000e34
 8001e40:	20000df0 	.word	0x20000df0

08001e44 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <xTaskGetSchedulerState+0x18>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	b133      	cbz	r3, 8001e58 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <xTaskGetSchedulerState+0x1c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8001e50:	bf0c      	ite	eq
 8001e52:	2002      	moveq	r0, #2
 8001e54:	2000      	movne	r0, #0
 8001e56:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001e58:	2001      	movs	r0, #1
	}
 8001e5a:	4770      	bx	lr
 8001e5c:	20000e04 	.word	0x20000e04
 8001e60:	20000db0 	.word	0x20000db0

08001e64 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8001e64:	b5b0      	push	{r4, r5, r7, lr}
 8001e66:	b08c      	sub	sp, #48	; 0x30
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e6a:	f7fe f979 	bl	8000160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e6e:	f000 f845 	bl	8001efc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e72:	f000 f941 	bl	80020f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001e76:	f000 f893 	bl	8001fa0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001e7a:	f000 f90f 	bl	800209c <MX_USART1_UART_Init>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of PwmTask */
  osThreadDef(PwmTask, Task_1, osPriorityNormal, 0, 128);
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <main+0x80>)
 8001e80:	f107 041c 	add.w	r4, r7, #28
 8001e84:	461d      	mov	r5, r3
 8001e86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e8a:	682b      	ldr	r3, [r5, #0]
 8001e8c:	6023      	str	r3, [r4, #0]
  PwmTaskHandle = osThreadCreate(osThread(PwmTask), NULL);
 8001e8e:	f107 031c 	add.w	r3, r7, #28
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff f9ad 	bl	80011f4 <osThreadCreate>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <main+0x84>)
 8001e9e:	601a      	str	r2, [r3, #0]

  /* definition and creation of UartTask */
  osThreadDef(UartTask, Task_2, osPriorityIdle, 0, 128);
 8001ea0:	4b12      	ldr	r3, [pc, #72]	; (8001eec <main+0x88>)
 8001ea2:	f107 0408 	add.w	r4, r7, #8
 8001ea6:	461d      	mov	r5, r3
 8001ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eac:	682b      	ldr	r3, [r5, #0]
 8001eae:	6023      	str	r3, [r4, #0]
  UartTaskHandle = osThreadCreate(osThread(UartTask), NULL);
 8001eb0:	f107 0308 	add.w	r3, r7, #8
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f99c 	bl	80011f4 <osThreadCreate>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <main+0x8c>)
 8001ec0:	601a      	str	r2, [r3, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 8001ec2:	4a0c      	ldr	r2, [pc, #48]	; (8001ef4 <main+0x90>)
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001eca:	e883 0003 	stmia.w	r3, {r0, r1}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8001ece:	463b      	mov	r3, r7
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff f9af 	bl	8001236 <osMessageCreate>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <main+0x94>)
 8001edc:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8001ede:	f7ff f984 	bl	80011ea <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001ee2:	e7fe      	b.n	8001ee2 <main+0x7e>
 8001ee4:	0800297c 	.word	0x0800297c
 8001ee8:	20000ec0 	.word	0x20000ec0
 8001eec:	0800299c 	.word	0x0800299c
 8001ef0:	20000f08 	.word	0x20000f08
 8001ef4:	080029b0 	.word	0x080029b0
 8001ef8:	20000ec4 	.word	0x20000ec4

08001efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b090      	sub	sp, #64	; 0x40
 8001f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f02:	2301      	movs	r3, #1
 8001f04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f10:	2301      	movs	r3, #1
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f14:	2302      	movs	r3, #2
 8001f16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f1e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f24:	f107 0318 	add.w	r3, r7, #24
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fa97 	bl	800045c <HAL_RCC_OscConfig>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f34:	21d1      	movs	r1, #209	; 0xd1
 8001f36:	4818      	ldr	r0, [pc, #96]	; (8001f98 <SystemClock_Config+0x9c>)
 8001f38:	f000 fbae 	bl	8002698 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f3c:	230f      	movs	r3, #15
 8001f3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f40:	2302      	movs	r3, #2
 8001f42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	2102      	movs	r1, #2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fc4a 	bl	80007f0 <HAL_RCC_ClockConfig>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <SystemClock_Config+0x6e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f62:	21df      	movs	r1, #223	; 0xdf
 8001f64:	480c      	ldr	r0, [pc, #48]	; (8001f98 <SystemClock_Config+0x9c>)
 8001f66:	f000 fb97 	bl	8002698 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001f6a:	f7fe fce5 	bl	8000938 <HAL_RCC_GetHCLKFreq>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <SystemClock_Config+0xa0>)
 8001f72:	fba3 2302 	umull	r2, r3, r3, r2
 8001f76:	099b      	lsrs	r3, r3, #6
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe f963 	bl	8000244 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001f7e:	2004      	movs	r0, #4
 8001f80:	f7fe f976 	bl	8000270 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	210f      	movs	r1, #15
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f8c:	f7fe f91a 	bl	80001c4 <HAL_NVIC_SetPriority>
}
 8001f90:	bf00      	nop
 8001f92:	3740      	adds	r7, #64	; 0x40
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	080029b8 	.word	0x080029b8
 8001f9c:	10624dd3 	.word	0x10624dd3

08001fa0 <MX_TIM2_Init>:

/* TIM2 init function */
static void MX_TIM2_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 8001fa6:	4b3b      	ldr	r3, [pc, #236]	; (8002094 <MX_TIM2_Init+0xf4>)
 8001fa8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8001fae:	4b39      	ldr	r3, [pc, #228]	; (8002094 <MX_TIM2_Init+0xf4>)
 8001fb0:	220f      	movs	r2, #15
 8001fb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb4:	4b37      	ldr	r3, [pc, #220]	; (8002094 <MX_TIM2_Init+0xf4>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 13513;
 8001fba:	4b36      	ldr	r3, [pc, #216]	; (8002094 <MX_TIM2_Init+0xf4>)
 8001fbc:	f243 42c9 	movw	r2, #13513	; 0x34c9
 8001fc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc2:	4b34      	ldr	r3, [pc, #208]	; (8002094 <MX_TIM2_Init+0xf4>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc8:	4b32      	ldr	r3, [pc, #200]	; (8002094 <MX_TIM2_Init+0xf4>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fce:	4831      	ldr	r0, [pc, #196]	; (8002094 <MX_TIM2_Init+0xf4>)
 8001fd0:	f7fe fe6e 	bl	8000cb0 <HAL_TIM_PWM_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <MX_TIM2_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001fda:	21fd      	movs	r1, #253	; 0xfd
 8001fdc:	482e      	ldr	r0, [pc, #184]	; (8002098 <MX_TIM2_Init+0xf8>)
 8001fde:	f000 fb5b 	bl	8002698 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fea:	f107 0320 	add.w	r3, r7, #32
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4828      	ldr	r0, [pc, #160]	; (8002094 <MX_TIM2_Init+0xf4>)
 8001ff2:	f7fe ff27 	bl	8000e44 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d004      	beq.n	8002006 <MX_TIM2_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001ffc:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002000:	4825      	ldr	r0, [pc, #148]	; (8002098 <MX_TIM2_Init+0xf8>)
 8002002:	f000 fb49 	bl	8002698 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002006:	2360      	movs	r3, #96	; 0x60
 8002008:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	2200      	movs	r2, #0
 800201a:	4619      	mov	r1, r3
 800201c:	481d      	ldr	r0, [pc, #116]	; (8002094 <MX_TIM2_Init+0xf4>)
 800201e:	f7fe fe8d 	bl	8000d3c <HAL_TIM_PWM_ConfigChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d004      	beq.n	8002032 <MX_TIM2_Init+0x92>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002028:	f240 110d 	movw	r1, #269	; 0x10d
 800202c:	481a      	ldr	r0, [pc, #104]	; (8002098 <MX_TIM2_Init+0xf8>)
 800202e:	f000 fb33 	bl	8002698 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2204      	movs	r2, #4
 8002036:	4619      	mov	r1, r3
 8002038:	4816      	ldr	r0, [pc, #88]	; (8002094 <MX_TIM2_Init+0xf4>)
 800203a:	f7fe fe7f 	bl	8000d3c <HAL_TIM_PWM_ConfigChannel>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d004      	beq.n	800204e <MX_TIM2_Init+0xae>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002044:	f44f 7189 	mov.w	r1, #274	; 0x112
 8002048:	4813      	ldr	r0, [pc, #76]	; (8002098 <MX_TIM2_Init+0xf8>)
 800204a:	f000 fb25 	bl	8002698 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	2208      	movs	r2, #8
 8002052:	4619      	mov	r1, r3
 8002054:	480f      	ldr	r0, [pc, #60]	; (8002094 <MX_TIM2_Init+0xf4>)
 8002056:	f7fe fe71 	bl	8000d3c <HAL_TIM_PWM_ConfigChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d004      	beq.n	800206a <MX_TIM2_Init+0xca>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002060:	f240 1117 	movw	r1, #279	; 0x117
 8002064:	480c      	ldr	r0, [pc, #48]	; (8002098 <MX_TIM2_Init+0xf8>)
 8002066:	f000 fb17 	bl	8002698 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	220c      	movs	r2, #12
 800206e:	4619      	mov	r1, r3
 8002070:	4808      	ldr	r0, [pc, #32]	; (8002094 <MX_TIM2_Init+0xf4>)
 8002072:	f7fe fe63 	bl	8000d3c <HAL_TIM_PWM_ConfigChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d004      	beq.n	8002086 <MX_TIM2_Init+0xe6>
  {
    _Error_Handler(__FILE__, __LINE__);
 800207c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8002080:	4805      	ldr	r0, [pc, #20]	; (8002098 <MX_TIM2_Init+0xf8>)
 8002082:	f000 fb09 	bl	8002698 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 8002086:	4803      	ldr	r0, [pc, #12]	; (8002094 <MX_TIM2_Init+0xf4>)
 8002088:	f000 fb66 	bl	8002758 <HAL_TIM_MspPostInit>

}
 800208c:	bf00      	nop
 800208e:	3728      	adds	r7, #40	; 0x28
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000ec8 	.word	0x20000ec8
 8002098:	080029b8 	.word	0x080029b8

0800209c <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <MX_USART1_UART_Init+0x50>)
 80020a2:	4a13      	ldr	r2, [pc, #76]	; (80020f0 <MX_USART1_UART_Init+0x54>)
 80020a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <MX_USART1_UART_Init+0x50>)
 80020a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <MX_USART1_UART_Init+0x50>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020b4:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <MX_USART1_UART_Init+0x50>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <MX_USART1_UART_Init+0x50>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020c0:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <MX_USART1_UART_Init+0x50>)
 80020c2:	220c      	movs	r2, #12
 80020c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <MX_USART1_UART_Init+0x50>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <MX_USART1_UART_Init+0x50>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020d2:	4806      	ldr	r0, [pc, #24]	; (80020ec <MX_USART1_UART_Init+0x50>)
 80020d4:	f7fe ffa0 	bl	8001018 <HAL_UART_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d004      	beq.n	80020e8 <MX_USART1_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80020de:	f240 1131 	movw	r1, #305	; 0x131
 80020e2:	4804      	ldr	r0, [pc, #16]	; (80020f4 <MX_USART1_UART_Init+0x58>)
 80020e4:	f000 fad8 	bl	8002698 <_Error_Handler>
  }

}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000e7c 	.word	0x20000e7c
 80020f0:	40013800 	.word	0x40013800
 80020f4:	080029b8 	.word	0x080029b8

080020f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fe:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <MX_GPIO_Init+0x7c>)
 8002100:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <MX_GPIO_Init+0x7c>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f043 0310 	orr.w	r3, r3, #16
 8002108:	6193      	str	r3, [r2, #24]
 800210a:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <MX_GPIO_Init+0x7c>)
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002116:	4a17      	ldr	r2, [pc, #92]	; (8002174 <MX_GPIO_Init+0x7c>)
 8002118:	4b16      	ldr	r3, [pc, #88]	; (8002174 <MX_GPIO_Init+0x7c>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f043 0320 	orr.w	r3, r3, #32
 8002120:	6193      	str	r3, [r2, #24]
 8002122:	4b14      	ldr	r3, [pc, #80]	; (8002174 <MX_GPIO_Init+0x7c>)
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	4a11      	ldr	r2, [pc, #68]	; (8002174 <MX_GPIO_Init+0x7c>)
 8002130:	4b10      	ldr	r3, [pc, #64]	; (8002174 <MX_GPIO_Init+0x7c>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	6193      	str	r3, [r2, #24]
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <MX_GPIO_Init+0x7c>)
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002146:	2200      	movs	r2, #0
 8002148:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800214c:	480a      	ldr	r0, [pc, #40]	; (8002178 <MX_GPIO_Init+0x80>)
 800214e:	f7fe f97b 	bl	8000448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002152:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002156:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002158:	2301      	movs	r3, #1
 800215a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2302      	movs	r3, #2
 800215e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002160:	f107 0310 	add.w	r3, r7, #16
 8002164:	4619      	mov	r1, r3
 8002166:	4804      	ldr	r0, [pc, #16]	; (8002178 <MX_GPIO_Init+0x80>)
 8002168:	f7fe f88e 	bl	8000288 <HAL_GPIO_Init>

}
 800216c:	bf00      	nop
 800216e:	3720      	adds	r7, #32
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000
 8002178:	40011000 	.word	0x40011000

0800217c <Init>:

/* USER CODE BEGIN 4 */

void Init(void) {
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
	uint8_t i;
	bNewFrame = false;
 8002182:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <Init+0x58>)
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]

	for (i = 0; i < FrameSize; i++) {
 8002188:	2300      	movs	r3, #0
 800218a:	71fb      	strb	r3, [r7, #7]
 800218c:	e00a      	b.n	80021a4 <Init+0x28>
		Frame[i] = 0;
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	4a11      	ldr	r2, [pc, #68]	; (80021d8 <Init+0x5c>)
 8002192:	2100      	movs	r1, #0
 8002194:	54d1      	strb	r1, [r2, r3]
		TestString[i] = 0;
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	4a10      	ldr	r2, [pc, #64]	; (80021dc <Init+0x60>)
 800219a:	2100      	movs	r1, #0
 800219c:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < FrameSize; i++) {
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	3301      	adds	r3, #1
 80021a2:	71fb      	strb	r3, [r7, #7]
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	2b13      	cmp	r3, #19
 80021a8:	d9f1      	bls.n	800218e <Init+0x12>
	}

	htim2.Instance->CCR1 = 0;		// Weiß
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <Init+0x64>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2200      	movs	r2, #0
 80021b0:	635a      	str	r2, [r3, #52]	; 0x34
	htim2.Instance->CCR2 = 0;		// Rot
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <Init+0x64>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2200      	movs	r2, #0
 80021b8:	639a      	str	r2, [r3, #56]	; 0x38
	htim2.Instance->CCR3 = 0;	 	// Grün
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <Init+0x64>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2200      	movs	r2, #0
 80021c0:	63da      	str	r2, [r3, #60]	; 0x3c
	htim2.Instance->CCR4 = 0;	// Blau
 80021c2:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <Init+0x64>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2200      	movs	r2, #0
 80021c8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	20000ebc 	.word	0x20000ebc
 80021d8:	20000e68 	.word	0x20000e68
 80021dc:	20000e54 	.word	0x20000e54
 80021e0:	20000ec8 	.word	0x20000ec8

080021e4 <CheckFrame>:

bool CheckFrame(void) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
	if(Frame[0] == 48 && Frame[1] == 49 && Frame[2] == 50 && Frame[3] == 51 && Frame[4] == 52 && Frame[5] == 53 && Frame[6] == 54 && Frame[7] == 55 && Frame[8] == 56 && Frame[9] == 57)
 80021e8:	4b17      	ldr	r3, [pc, #92]	; (8002248 <CheckFrame+0x64>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b30      	cmp	r3, #48	; 0x30
 80021ee:	d127      	bne.n	8002240 <CheckFrame+0x5c>
 80021f0:	4b15      	ldr	r3, [pc, #84]	; (8002248 <CheckFrame+0x64>)
 80021f2:	785b      	ldrb	r3, [r3, #1]
 80021f4:	2b31      	cmp	r3, #49	; 0x31
 80021f6:	d123      	bne.n	8002240 <CheckFrame+0x5c>
 80021f8:	4b13      	ldr	r3, [pc, #76]	; (8002248 <CheckFrame+0x64>)
 80021fa:	789b      	ldrb	r3, [r3, #2]
 80021fc:	2b32      	cmp	r3, #50	; 0x32
 80021fe:	d11f      	bne.n	8002240 <CheckFrame+0x5c>
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <CheckFrame+0x64>)
 8002202:	78db      	ldrb	r3, [r3, #3]
 8002204:	2b33      	cmp	r3, #51	; 0x33
 8002206:	d11b      	bne.n	8002240 <CheckFrame+0x5c>
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <CheckFrame+0x64>)
 800220a:	791b      	ldrb	r3, [r3, #4]
 800220c:	2b34      	cmp	r3, #52	; 0x34
 800220e:	d117      	bne.n	8002240 <CheckFrame+0x5c>
 8002210:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <CheckFrame+0x64>)
 8002212:	795b      	ldrb	r3, [r3, #5]
 8002214:	2b35      	cmp	r3, #53	; 0x35
 8002216:	d113      	bne.n	8002240 <CheckFrame+0x5c>
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <CheckFrame+0x64>)
 800221a:	799b      	ldrb	r3, [r3, #6]
 800221c:	2b36      	cmp	r3, #54	; 0x36
 800221e:	d10f      	bne.n	8002240 <CheckFrame+0x5c>
 8002220:	4b09      	ldr	r3, [pc, #36]	; (8002248 <CheckFrame+0x64>)
 8002222:	79db      	ldrb	r3, [r3, #7]
 8002224:	2b37      	cmp	r3, #55	; 0x37
 8002226:	d10b      	bne.n	8002240 <CheckFrame+0x5c>
 8002228:	4b07      	ldr	r3, [pc, #28]	; (8002248 <CheckFrame+0x64>)
 800222a:	7a1b      	ldrb	r3, [r3, #8]
 800222c:	2b38      	cmp	r3, #56	; 0x38
 800222e:	d107      	bne.n	8002240 <CheckFrame+0x5c>
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <CheckFrame+0x64>)
 8002232:	7a5b      	ldrb	r3, [r3, #9]
 8002234:	2b39      	cmp	r3, #57	; 0x39
 8002236:	d103      	bne.n	8002240 <CheckFrame+0x5c>
	{
		ProzessFrame();
 8002238:	f000 f808 	bl	800224c <ProzessFrame>
		return true;
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <CheckFrame+0x5e>
	}
	return false;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000e68 	.word	0x20000e68

0800224c <ProzessFrame>:

void ProzessFrame(void) {
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002250:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002254:	4822      	ldr	r0, [pc, #136]	; (80022e0 <ProzessFrame+0x94>)
 8002256:	f7fe f8fc 	bl	8000452 <HAL_GPIO_TogglePin>

	// Weiß:
	if(Frame[10] > 99) {
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <ProzessFrame+0x98>)
 800225c:	7a9b      	ldrb	r3, [r3, #10]
 800225e:	2b63      	cmp	r3, #99	; 0x63
 8002260:	d902      	bls.n	8002268 <ProzessFrame+0x1c>
		Frame[10] = 99;
 8002262:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <ProzessFrame+0x98>)
 8002264:	2263      	movs	r2, #99	; 0x63
 8002266:	729a      	strb	r2, [r3, #10]
	}
	Weiss = Tabelle[Frame[10]];
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <ProzessFrame+0x98>)
 800226a:	7a9b      	ldrb	r3, [r3, #10]
 800226c:	461a      	mov	r2, r3
 800226e:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <ProzessFrame+0x9c>)
 8002270:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002274:	461a      	mov	r2, r3
 8002276:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <ProzessFrame+0xa0>)
 8002278:	601a      	str	r2, [r3, #0]
//	htim2.Instance->CCR1 = Tabelle[Frame[10]];

	// Rot:
	if(Frame[11] > 99) {
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <ProzessFrame+0x98>)
 800227c:	7adb      	ldrb	r3, [r3, #11]
 800227e:	2b63      	cmp	r3, #99	; 0x63
 8002280:	d902      	bls.n	8002288 <ProzessFrame+0x3c>
		Frame[11] = 99;
 8002282:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <ProzessFrame+0x98>)
 8002284:	2263      	movs	r2, #99	; 0x63
 8002286:	72da      	strb	r2, [r3, #11]
	}
	Rot = Tabelle[Frame[11]];
 8002288:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <ProzessFrame+0x98>)
 800228a:	7adb      	ldrb	r3, [r3, #11]
 800228c:	461a      	mov	r2, r3
 800228e:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <ProzessFrame+0x9c>)
 8002290:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002294:	461a      	mov	r2, r3
 8002296:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <ProzessFrame+0xa4>)
 8002298:	601a      	str	r2, [r3, #0]
//	htim2.Instance->CCR2 = Tabelle[Frame[11]];

	// Grün:
	if(Frame[12] > 99) {
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <ProzessFrame+0x98>)
 800229c:	7b1b      	ldrb	r3, [r3, #12]
 800229e:	2b63      	cmp	r3, #99	; 0x63
 80022a0:	d902      	bls.n	80022a8 <ProzessFrame+0x5c>
		Frame[12] = 99;
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <ProzessFrame+0x98>)
 80022a4:	2263      	movs	r2, #99	; 0x63
 80022a6:	731a      	strb	r2, [r3, #12]
	}
	Gruen = Tabelle[Frame[12]];
 80022a8:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <ProzessFrame+0x98>)
 80022aa:	7b1b      	ldrb	r3, [r3, #12]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <ProzessFrame+0x9c>)
 80022b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <ProzessFrame+0xa8>)
 80022b8:	601a      	str	r2, [r3, #0]
//	htim2.Instance->CCR3 = Tabelle[Frame[12]];

	// Blau:
	if(Frame[13] > 99) {
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <ProzessFrame+0x98>)
 80022bc:	7b5b      	ldrb	r3, [r3, #13]
 80022be:	2b63      	cmp	r3, #99	; 0x63
 80022c0:	d902      	bls.n	80022c8 <ProzessFrame+0x7c>
		Frame[13] = 99;
 80022c2:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <ProzessFrame+0x98>)
 80022c4:	2263      	movs	r2, #99	; 0x63
 80022c6:	735a      	strb	r2, [r3, #13]
	}
	Blau = Tabelle[Frame[13]];
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <ProzessFrame+0x98>)
 80022ca:	7b5b      	ldrb	r3, [r3, #13]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <ProzessFrame+0x9c>)
 80022d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <ProzessFrame+0xac>)
 80022d8:	601a      	str	r2, [r3, #0]
//	htim2.Instance->CCR4 = Tabelle[Frame[13]];
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40011000 	.word	0x40011000
 80022e4:	20000e68 	.word	0x20000e68
 80022e8:	20000004 	.word	0x20000004
 80022ec:	20000e38 	.word	0x20000e38
 80022f0:	20000e3c 	.word	0x20000e3c
 80022f4:	20000e40 	.word	0x20000e40
 80022f8:	20000e44 	.word	0x20000e44

080022fc <Task_1>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void Task_1(void const * argument)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */

	uint32_t Delta = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8002308:	2001      	movs	r0, #1
 800230a:	f7fe ff8c 	bl	8001226 <osDelay>

		if(htim2.Instance->CCR1 < Weiss)
 800230e:	4b91      	ldr	r3, [pc, #580]	; (8002554 <Task_1+0x258>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002314:	4b90      	ldr	r3, [pc, #576]	; (8002558 <Task_1+0x25c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d21c      	bcs.n	8002356 <Task_1+0x5a>
		{
			Delta = Weiss - htim2.Instance->CCR1;
 800231c:	4b8e      	ldr	r3, [pc, #568]	; (8002558 <Task_1+0x25c>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4b8c      	ldr	r3, [pc, #560]	; (8002554 <Task_1+0x258>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	60fb      	str	r3, [r7, #12]

			if(Delta > 500)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002330:	d90c      	bls.n	800234c <Task_1+0x50>
			{
				htim2.Instance->CCR1 += Delta/100;
 8002332:	4b88      	ldr	r3, [pc, #544]	; (8002554 <Task_1+0x258>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a87      	ldr	r2, [pc, #540]	; (8002554 <Task_1+0x258>)
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	4887      	ldr	r0, [pc, #540]	; (800255c <Task_1+0x260>)
 8002340:	fba0 0202 	umull	r0, r2, r0, r2
 8002344:	0952      	lsrs	r2, r2, #5
 8002346:	440a      	add	r2, r1
 8002348:	635a      	str	r2, [r3, #52]	; 0x34
 800234a:	e004      	b.n	8002356 <Task_1+0x5a>
			}
			else
			{
				htim2.Instance->CCR1 ++;
 800234c:	4b81      	ldr	r3, [pc, #516]	; (8002554 <Task_1+0x258>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002352:	3201      	adds	r2, #1
 8002354:	635a      	str	r2, [r3, #52]	; 0x34
			}

		}
		if(htim2.Instance->CCR1 > Weiss)
 8002356:	4b7f      	ldr	r3, [pc, #508]	; (8002554 <Task_1+0x258>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800235c:	4b7e      	ldr	r3, [pc, #504]	; (8002558 <Task_1+0x25c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d91c      	bls.n	800239e <Task_1+0xa2>
		{
			Delta = htim2.Instance->CCR1 - Weiss;
 8002364:	4b7b      	ldr	r3, [pc, #492]	; (8002554 <Task_1+0x258>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800236a:	4b7b      	ldr	r3, [pc, #492]	; (8002558 <Task_1+0x25c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	60fb      	str	r3, [r7, #12]

			if(Delta > 500)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002378:	d90c      	bls.n	8002394 <Task_1+0x98>
			{
				htim2.Instance->CCR1 -= Delta/100;
 800237a:	4b76      	ldr	r3, [pc, #472]	; (8002554 <Task_1+0x258>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a75      	ldr	r2, [pc, #468]	; (8002554 <Task_1+0x258>)
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4875      	ldr	r0, [pc, #468]	; (800255c <Task_1+0x260>)
 8002388:	fba0 0202 	umull	r0, r2, r0, r2
 800238c:	0952      	lsrs	r2, r2, #5
 800238e:	1a8a      	subs	r2, r1, r2
 8002390:	635a      	str	r2, [r3, #52]	; 0x34
 8002392:	e004      	b.n	800239e <Task_1+0xa2>
			}
			else
			{
				htim2.Instance->CCR1 --;
 8002394:	4b6f      	ldr	r3, [pc, #444]	; (8002554 <Task_1+0x258>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800239a:	3a01      	subs	r2, #1
 800239c:	635a      	str	r2, [r3, #52]	; 0x34
		}




		if(htim2.Instance->CCR2 < Rot)
 800239e:	4b6d      	ldr	r3, [pc, #436]	; (8002554 <Task_1+0x258>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023a4:	4b6e      	ldr	r3, [pc, #440]	; (8002560 <Task_1+0x264>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d21c      	bcs.n	80023e6 <Task_1+0xea>
		{
			Delta = Rot - htim2.Instance->CCR2;
 80023ac:	4b6c      	ldr	r3, [pc, #432]	; (8002560 <Task_1+0x264>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b68      	ldr	r3, [pc, #416]	; (8002554 <Task_1+0x258>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	60fb      	str	r3, [r7, #12]

			if(Delta > 500)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023c0:	d90c      	bls.n	80023dc <Task_1+0xe0>
			{
				htim2.Instance->CCR2 += Delta/100;
 80023c2:	4b64      	ldr	r3, [pc, #400]	; (8002554 <Task_1+0x258>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a63      	ldr	r2, [pc, #396]	; (8002554 <Task_1+0x258>)
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	4863      	ldr	r0, [pc, #396]	; (800255c <Task_1+0x260>)
 80023d0:	fba0 0202 	umull	r0, r2, r0, r2
 80023d4:	0952      	lsrs	r2, r2, #5
 80023d6:	440a      	add	r2, r1
 80023d8:	639a      	str	r2, [r3, #56]	; 0x38
 80023da:	e004      	b.n	80023e6 <Task_1+0xea>
			}
			else
			{
				htim2.Instance->CCR2 ++;
 80023dc:	4b5d      	ldr	r3, [pc, #372]	; (8002554 <Task_1+0x258>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023e2:	3201      	adds	r2, #1
 80023e4:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
		if(htim2.Instance->CCR2 > Rot)
 80023e6:	4b5b      	ldr	r3, [pc, #364]	; (8002554 <Task_1+0x258>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ec:	4b5c      	ldr	r3, [pc, #368]	; (8002560 <Task_1+0x264>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d91c      	bls.n	800242e <Task_1+0x132>
		{
			Delta = htim2.Instance->CCR2 - Rot;
 80023f4:	4b57      	ldr	r3, [pc, #348]	; (8002554 <Task_1+0x258>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023fa:	4b59      	ldr	r3, [pc, #356]	; (8002560 <Task_1+0x264>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	60fb      	str	r3, [r7, #12]

			if(Delta > 500)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002408:	d90c      	bls.n	8002424 <Task_1+0x128>
			{
				htim2.Instance->CCR2 -= Delta/100;
 800240a:	4b52      	ldr	r3, [pc, #328]	; (8002554 <Task_1+0x258>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a51      	ldr	r2, [pc, #324]	; (8002554 <Task_1+0x258>)
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4851      	ldr	r0, [pc, #324]	; (800255c <Task_1+0x260>)
 8002418:	fba0 0202 	umull	r0, r2, r0, r2
 800241c:	0952      	lsrs	r2, r2, #5
 800241e:	1a8a      	subs	r2, r1, r2
 8002420:	639a      	str	r2, [r3, #56]	; 0x38
 8002422:	e004      	b.n	800242e <Task_1+0x132>
			}
			else
			{
				htim2.Instance->CCR2 --;
 8002424:	4b4b      	ldr	r3, [pc, #300]	; (8002554 <Task_1+0x258>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800242a:	3a01      	subs	r2, #1
 800242c:	639a      	str	r2, [r3, #56]	; 0x38





		if(htim2.Instance->CCR3 < Gruen)
 800242e:	4b49      	ldr	r3, [pc, #292]	; (8002554 <Task_1+0x258>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002434:	4b4b      	ldr	r3, [pc, #300]	; (8002564 <Task_1+0x268>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d21c      	bcs.n	8002476 <Task_1+0x17a>
		{
			Delta = Gruen - htim2.Instance->CCR3;
 800243c:	4b49      	ldr	r3, [pc, #292]	; (8002564 <Task_1+0x268>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b44      	ldr	r3, [pc, #272]	; (8002554 <Task_1+0x258>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	60fb      	str	r3, [r7, #12]

			if(Delta > 500)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002450:	d90c      	bls.n	800246c <Task_1+0x170>
			{
				htim2.Instance->CCR3 += Delta/100;
 8002452:	4b40      	ldr	r3, [pc, #256]	; (8002554 <Task_1+0x258>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a3f      	ldr	r2, [pc, #252]	; (8002554 <Task_1+0x258>)
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	483f      	ldr	r0, [pc, #252]	; (800255c <Task_1+0x260>)
 8002460:	fba0 0202 	umull	r0, r2, r0, r2
 8002464:	0952      	lsrs	r2, r2, #5
 8002466:	440a      	add	r2, r1
 8002468:	63da      	str	r2, [r3, #60]	; 0x3c
 800246a:	e004      	b.n	8002476 <Task_1+0x17a>
			}
			else
			{
				htim2.Instance->CCR3 ++;
 800246c:	4b39      	ldr	r3, [pc, #228]	; (8002554 <Task_1+0x258>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002472:	3201      	adds	r2, #1
 8002474:	63da      	str	r2, [r3, #60]	; 0x3c
			}
		}
		if(htim2.Instance->CCR3 > Gruen)
 8002476:	4b37      	ldr	r3, [pc, #220]	; (8002554 <Task_1+0x258>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800247c:	4b39      	ldr	r3, [pc, #228]	; (8002564 <Task_1+0x268>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d91c      	bls.n	80024be <Task_1+0x1c2>
		{
			Delta = htim2.Instance->CCR3 - Gruen;
 8002484:	4b33      	ldr	r3, [pc, #204]	; (8002554 <Task_1+0x258>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800248a:	4b36      	ldr	r3, [pc, #216]	; (8002564 <Task_1+0x268>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	60fb      	str	r3, [r7, #12]

			if(Delta > 500)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002498:	d90c      	bls.n	80024b4 <Task_1+0x1b8>
			{
				htim2.Instance->CCR3 -= Delta/100;
 800249a:	4b2e      	ldr	r3, [pc, #184]	; (8002554 <Task_1+0x258>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2d      	ldr	r2, [pc, #180]	; (8002554 <Task_1+0x258>)
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	482d      	ldr	r0, [pc, #180]	; (800255c <Task_1+0x260>)
 80024a8:	fba0 0202 	umull	r0, r2, r0, r2
 80024ac:	0952      	lsrs	r2, r2, #5
 80024ae:	1a8a      	subs	r2, r1, r2
 80024b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80024b2:	e004      	b.n	80024be <Task_1+0x1c2>
			}
			else
			{
				htim2.Instance->CCR3 --;
 80024b4:	4b27      	ldr	r3, [pc, #156]	; (8002554 <Task_1+0x258>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024ba:	3a01      	subs	r2, #1
 80024bc:	63da      	str	r2, [r3, #60]	; 0x3c





		if(htim2.Instance->CCR4 < Blau)
 80024be:	4b25      	ldr	r3, [pc, #148]	; (8002554 <Task_1+0x258>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024c4:	4b28      	ldr	r3, [pc, #160]	; (8002568 <Task_1+0x26c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d21c      	bcs.n	8002506 <Task_1+0x20a>
		{
			Delta = Blau - htim2.Instance->CCR4;
 80024cc:	4b26      	ldr	r3, [pc, #152]	; (8002568 <Task_1+0x26c>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b20      	ldr	r3, [pc, #128]	; (8002554 <Task_1+0x258>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	60fb      	str	r3, [r7, #12]

			if(Delta > 500)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80024e0:	d90c      	bls.n	80024fc <Task_1+0x200>
			{
				htim2.Instance->CCR4 += Delta/100;
 80024e2:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <Task_1+0x258>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a1b      	ldr	r2, [pc, #108]	; (8002554 <Task_1+0x258>)
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	481b      	ldr	r0, [pc, #108]	; (800255c <Task_1+0x260>)
 80024f0:	fba0 0202 	umull	r0, r2, r0, r2
 80024f4:	0952      	lsrs	r2, r2, #5
 80024f6:	440a      	add	r2, r1
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
 80024fa:	e004      	b.n	8002506 <Task_1+0x20a>
			}
			else
			{
				htim2.Instance->CCR4 ++;
 80024fc:	4b15      	ldr	r3, [pc, #84]	; (8002554 <Task_1+0x258>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002502:	3201      	adds	r2, #1
 8002504:	641a      	str	r2, [r3, #64]	; 0x40
			}
		}
		if(htim2.Instance->CCR4 > Blau)
 8002506:	4b13      	ldr	r3, [pc, #76]	; (8002554 <Task_1+0x258>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800250c:	4b16      	ldr	r3, [pc, #88]	; (8002568 <Task_1+0x26c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	f67f aef9 	bls.w	8002308 <Task_1+0xc>
		{
			Delta = htim2.Instance->CCR4 - Blau;
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <Task_1+0x258>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <Task_1+0x26c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	60fb      	str	r3, [r7, #12]

			if(Delta > 500)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800252a:	d90c      	bls.n	8002546 <Task_1+0x24a>
			{
				htim2.Instance->CCR4 -= Delta/100;
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <Task_1+0x258>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a08      	ldr	r2, [pc, #32]	; (8002554 <Task_1+0x258>)
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4808      	ldr	r0, [pc, #32]	; (800255c <Task_1+0x260>)
 800253a:	fba0 0202 	umull	r0, r2, r0, r2
 800253e:	0952      	lsrs	r2, r2, #5
 8002540:	1a8a      	subs	r2, r1, r2
 8002542:	641a      	str	r2, [r3, #64]	; 0x40
 8002544:	e6e0      	b.n	8002308 <Task_1+0xc>
			}
			else
			{
				htim2.Instance->CCR4 --;
 8002546:	4b03      	ldr	r3, [pc, #12]	; (8002554 <Task_1+0x258>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800254c:	3a01      	subs	r2, #1
 800254e:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(1);
 8002550:	e6da      	b.n	8002308 <Task_1+0xc>
 8002552:	bf00      	nop
 8002554:	20000ec8 	.word	0x20000ec8
 8002558:	20000e38 	.word	0x20000e38
 800255c:	51eb851f 	.word	0x51eb851f
 8002560:	20000e3c 	.word	0x20000e3c
 8002564:	20000e40 	.word	0x20000e40
 8002568:	20000e44 	.word	0x20000e44

0800256c <Task_2>:
  /* USER CODE END 5 */ 
}

/* StartTask02 function */
void Task_2(void const * argument)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	static uint8_t ucIndex = 0;
	static uint32_t uRxTimeOutValue = 0;
	uint8_t Value = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	75fb      	strb	r3, [r7, #23]


//	htim2.Init.Prescaler = 15;
//	htim2.Init.Period = 13513;

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002578:	2100      	movs	r1, #0
 800257a:	4837      	ldr	r0, [pc, #220]	; (8002658 <Task_2+0xec>)
 800257c:	f7fe fc4c 	bl	8000e18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002580:	2104      	movs	r1, #4
 8002582:	4835      	ldr	r0, [pc, #212]	; (8002658 <Task_2+0xec>)
 8002584:	f7fe fc48 	bl	8000e18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002588:	2108      	movs	r1, #8
 800258a:	4833      	ldr	r0, [pc, #204]	; (8002658 <Task_2+0xec>)
 800258c:	f7fe fc44 	bl	8000e18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002590:	210c      	movs	r1, #12
 8002592:	4831      	ldr	r0, [pc, #196]	; (8002658 <Task_2+0xec>)
 8002594:	f7fe fc40 	bl	8000e18 <HAL_TIM_PWM_Start>

	Init();
 8002598:	f7ff fdf0 	bl	800217c <Init>

	/* Infinite loop */
	for (;;) {

		if((huart1.Instance->SR & 0x20) == 0x20)
 800259c:	4b2f      	ldr	r3, [pc, #188]	; (800265c <Task_2+0xf0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0320 	and.w	r3, r3, #32
 80025a6:	2b20      	cmp	r3, #32
 80025a8:	d117      	bne.n	80025da <Task_2+0x6e>
		{
			HAL_UART_Receive(&huart1, &Value, 1, 1);
 80025aa:	f107 0117 	add.w	r1, r7, #23
 80025ae:	2301      	movs	r3, #1
 80025b0:	2201      	movs	r2, #1
 80025b2:	482a      	ldr	r0, [pc, #168]	; (800265c <Task_2+0xf0>)
 80025b4:	f7fe fdba 	bl	800112c <HAL_UART_Receive>
			Frame[ucIndex] = Value;
 80025b8:	4b29      	ldr	r3, [pc, #164]	; (8002660 <Task_2+0xf4>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	7df9      	ldrb	r1, [r7, #23]
 80025c0:	4b28      	ldr	r3, [pc, #160]	; (8002664 <Task_2+0xf8>)
 80025c2:	5499      	strb	r1, [r3, r2]
			ucIndex++;
 80025c4:	4b26      	ldr	r3, [pc, #152]	; (8002660 <Task_2+0xf4>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	4b24      	ldr	r3, [pc, #144]	; (8002660 <Task_2+0xf4>)
 80025ce:	701a      	strb	r2, [r3, #0]
			uRxTimeOutValue = HAL_GetTick();
 80025d0:	f7fd fde0 	bl	8000194 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b24      	ldr	r3, [pc, #144]	; (8002668 <Task_2+0xfc>)
 80025d8:	601a      	str	r2, [r3, #0]
		}
//    osDelay(500);


		if (ucIndex == FrameSize) {
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <Task_2+0xf4>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b14      	cmp	r3, #20
 80025e0:	d12e      	bne.n	8002640 <Task_2+0xd4>
			ucIndex = 0;
 80025e2:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <Task_2+0xf4>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
			if(CheckFrame()) {
 80025e8:	f7ff fdfc 	bl	80021e4 <CheckFrame>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d011      	beq.n	8002616 <Task_2+0xaa>
				strncpy(Answer, "OK\n\r", 4);
 80025f2:	f107 030c 	add.w	r3, r7, #12
 80025f6:	4a1d      	ldr	r2, [pc, #116]	; (800266c <Task_2+0x100>)
 80025f8:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, (uint8_t*)Answer, strlen(Answer), 10);
 80025fa:	f107 030c 	add.w	r3, r7, #12
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd fda6 	bl	8000150 <strlen>
 8002604:	4603      	mov	r3, r0
 8002606:	b29a      	uxth	r2, r3
 8002608:	f107 010c 	add.w	r1, r7, #12
 800260c:	230a      	movs	r3, #10
 800260e:	4813      	ldr	r0, [pc, #76]	; (800265c <Task_2+0xf0>)
 8002610:	f7fe fd30 	bl	8001074 <HAL_UART_Transmit>
 8002614:	e014      	b.n	8002640 <Task_2+0xd4>
			}
			else {
				strncpy(Answer, "FAIL\n\r", 6);
 8002616:	f107 030c 	add.w	r3, r7, #12
 800261a:	4a15      	ldr	r2, [pc, #84]	; (8002670 <Task_2+0x104>)
 800261c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002620:	6018      	str	r0, [r3, #0]
 8002622:	3304      	adds	r3, #4
 8002624:	8019      	strh	r1, [r3, #0]
				HAL_UART_Transmit(&huart1, (uint8_t*)Answer, strlen(Answer), 10);
 8002626:	f107 030c 	add.w	r3, r7, #12
 800262a:	4618      	mov	r0, r3
 800262c:	f7fd fd90 	bl	8000150 <strlen>
 8002630:	4603      	mov	r3, r0
 8002632:	b29a      	uxth	r2, r3
 8002634:	f107 010c 	add.w	r1, r7, #12
 8002638:	230a      	movs	r3, #10
 800263a:	4808      	ldr	r0, [pc, #32]	; (800265c <Task_2+0xf0>)
 800263c:	f7fe fd1a 	bl	8001074 <HAL_UART_Transmit>
			}
		}

		if ((HAL_GetTick() - uRxTimeOutValue) > RxTimeOut) {
 8002640:	f7fd fda8 	bl	8000194 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	4b08      	ldr	r3, [pc, #32]	; (8002668 <Task_2+0xfc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b32      	cmp	r3, #50	; 0x32
 800264e:	d9a5      	bls.n	800259c <Task_2+0x30>
			ucIndex = 0;
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <Task_2+0xf4>)
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
		if((huart1.Instance->SR & 0x20) == 0x20)
 8002656:	e7a1      	b.n	800259c <Task_2+0x30>
 8002658:	20000ec8 	.word	0x20000ec8
 800265c:	20000e7c 	.word	0x20000e7c
 8002660:	20000e48 	.word	0x20000e48
 8002664:	20000e68 	.word	0x20000e68
 8002668:	20000e4c 	.word	0x20000e4c
 800266c:	0d0a4b4f 	.word	0x0d0a4b4f
 8002670:	080029c8 	.word	0x080029c8

08002674 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a04      	ldr	r2, [pc, #16]	; (8002694 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d101      	bne.n	800268a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002686:	f7fd fd7d 	bl	8000184 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40012c00 	.word	0x40012c00

08002698 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 80026a2:	e7fe      	b.n	80026a2 <_Error_Handler+0xa>

080026a4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026a4:	4b21      	ldr	r3, [pc, #132]	; (800272c <HAL_MspInit+0x88>)
{
 80026a6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80026a8:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026aa:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80026ac:	f042 0201 	orr.w	r2, r2, #1
 80026b0:	619a      	str	r2, [r3, #24]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026bc:	f7fd fd70 	bl	80001a0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80026c0:	2200      	movs	r2, #0
 80026c2:	f06f 000b 	mvn.w	r0, #11
 80026c6:	4611      	mov	r1, r2
 80026c8:	f7fd fd7c 	bl	80001c4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80026cc:	2200      	movs	r2, #0
 80026ce:	f06f 000a 	mvn.w	r0, #10
 80026d2:	4611      	mov	r1, r2
 80026d4:	f7fd fd76 	bl	80001c4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80026d8:	2200      	movs	r2, #0
 80026da:	f06f 0009 	mvn.w	r0, #9
 80026de:	4611      	mov	r1, r2
 80026e0:	f7fd fd70 	bl	80001c4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80026e4:	2200      	movs	r2, #0
 80026e6:	f06f 0004 	mvn.w	r0, #4
 80026ea:	4611      	mov	r1, r2
 80026ec:	f7fd fd6a 	bl	80001c4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80026f0:	2200      	movs	r2, #0
 80026f2:	f06f 0003 	mvn.w	r0, #3
 80026f6:	4611      	mov	r1, r2
 80026f8:	f7fd fd64 	bl	80001c4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026fc:	2200      	movs	r2, #0
 80026fe:	210f      	movs	r1, #15
 8002700:	f06f 0001 	mvn.w	r0, #1
 8002704:	f7fd fd5e 	bl	80001c4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002708:	2200      	movs	r2, #0
 800270a:	210f      	movs	r1, #15
 800270c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002710:	f7fd fd58 	bl	80001c4 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_MspInit+0x8c>)
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002724:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002726:	b003      	add	sp, #12
 8002728:	f85d fb04 	ldr.w	pc, [sp], #4
 800272c:	40021000 	.word	0x40021000
 8002730:	40010000 	.word	0x40010000

08002734 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM2)
 8002734:	6803      	ldr	r3, [r0, #0]
{
 8002736:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM2)
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d10a      	bne.n	8002754 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800273e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002742:	69da      	ldr	r2, [r3, #28]
 8002744:	f042 0201 	orr.w	r2, r2, #1
 8002748:	61da      	str	r2, [r3, #28]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002754:	b002      	add	sp, #8
 8002756:	4770      	bx	lr

08002758 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002758:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 800275a:	6803      	ldr	r3, [r0, #0]
 800275c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002760:	d108      	bne.n	8002774 <HAL_TIM_MspPostInit+0x1c>
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002762:	230f      	movs	r3, #15
 8002764:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002766:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002768:	4669      	mov	r1, sp
 800276a:	4804      	ldr	r0, [pc, #16]	; (800277c <HAL_TIM_MspPostInit+0x24>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002770:	f7fd fd8a 	bl	8000288 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002774:	b005      	add	sp, #20
 8002776:	f85d fb04 	ldr.w	pc, [sp], #4
 800277a:	bf00      	nop
 800277c:	40010800 	.word	0x40010800

08002780 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002780:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002782:	6802      	ldr	r2, [r0, #0]
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_UART_MspInit+0x50>)
 8002786:	429a      	cmp	r2, r3
 8002788:	d11f      	bne.n	80027ca <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800278a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800278e:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002790:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002792:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002796:	619a      	str	r2, [r3, #24]
 8002798:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279a:	480e      	ldr	r0, [pc, #56]	; (80027d4 <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800279c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027a8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027aa:	2302      	movs	r3, #2
 80027ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ae:	2303      	movs	r3, #3
 80027b0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b2:	f7fd fd69 	bl	8000288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027ba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027bc:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027be:	a902      	add	r1, sp, #8
 80027c0:	4804      	ldr	r0, [pc, #16]	; (80027d4 <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c6:	f7fd fd5f 	bl	8000288 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027ca:	b007      	add	sp, #28
 80027cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80027d0:	40013800 	.word	0x40013800
 80027d4:	40010800 	.word	0x40010800

080027d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d8:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80027da:	4601      	mov	r1, r0
{
 80027dc:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80027de:	2200      	movs	r2, #0
 80027e0:	2019      	movs	r0, #25
 80027e2:	f7fd fcef 	bl	80001c4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 80027e6:	2019      	movs	r0, #25
 80027e8:	f7fd fd20 	bl	800022c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80027ec:	4b14      	ldr	r3, [pc, #80]	; (8002840 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027ee:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 80027f0:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027f2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 80027f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027f8:	619a      	str	r2, [r3, #24]
 80027fa:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80027fc:	4c11      	ldr	r4, [pc, #68]	; (8002844 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 80027fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002802:	9302      	str	r3, [sp, #8]
 8002804:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002806:	f7fe f8bd 	bl	8000984 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800280a:	f7fe f8ab 	bl	8000964 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 800280e:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <HAL_InitTick+0x70>)
 8002810:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002812:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002816:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <HAL_InitTick+0x74>)
 800281a:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800281e:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002820:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8002822:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002824:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8002826:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002828:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800282a:	f7fe fa27 	bl	8000c7c <HAL_TIM_Base_Init>
 800282e:	b920      	cbnz	r0, 800283a <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002830:	4620      	mov	r0, r4
 8002832:	f7fe f93a 	bl	8000aaa <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002836:	b008      	add	sp, #32
 8002838:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800283a:	2001      	movs	r0, #1
 800283c:	e7fb      	b.n	8002836 <HAL_InitTick+0x5e>
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000
 8002844:	20000f0c 	.word	0x20000f0c
 8002848:	40012c00 	.word	0x40012c00
 800284c:	000f4240 	.word	0x000f4240

08002850 <NMI_Handler>:
 8002850:	4770      	bx	lr

08002852 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002852:	e7fe      	b.n	8002852 <HardFault_Handler>

08002854 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002854:	e7fe      	b.n	8002854 <MemManage_Handler>

08002856 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002856:	e7fe      	b.n	8002856 <BusFault_Handler>

08002858 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002858:	e7fe      	b.n	8002858 <UsageFault_Handler>

0800285a <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800285a:	4770      	bx	lr

0800285c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800285c:	f7fe bcef 	b.w	800123e <osSystickHandler>

08002860 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002860:	4801      	ldr	r0, [pc, #4]	; (8002868 <TIM1_UP_IRQHandler+0x8>)
 8002862:	f7fe b931 	b.w	8000ac8 <HAL_TIM_IRQHandler>
 8002866:	bf00      	nop
 8002868:	20000f0c 	.word	0x20000f0c

0800286c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800286c:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <SystemInit+0x40>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	f042 0201 	orr.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	4a0d      	ldr	r2, [pc, #52]	; (80028b0 <SystemInit+0x44>)
 800287a:	400a      	ands	r2, r1
 800287c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002884:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002888:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002890:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002898:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800289a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800289e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80028a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <SystemInit+0x48>)
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	f8ff0000 	.word	0xf8ff0000
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80028b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80028ba:	e003      	b.n	80028c4 <LoopCopyDataInit>

080028bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80028be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80028c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80028c2:	3104      	adds	r1, #4

080028c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80028c4:	480a      	ldr	r0, [pc, #40]	; (80028f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80028c6:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80028c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80028ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80028cc:	d3f6      	bcc.n	80028bc <CopyDataInit>
  ldr r2, =_sbss
 80028ce:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80028d0:	e002      	b.n	80028d8 <LoopFillZerobss>

080028d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80028d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80028d4:	f842 3b04 	str.w	r3, [r2], #4

080028d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80028da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80028dc:	d3f9      	bcc.n	80028d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028de:	f7ff ffc5 	bl	800286c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028e2:	f000 f80f 	bl	8002904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028e6:	f7ff fabd 	bl	8001e64 <main>
  bx lr
 80028ea:	4770      	bx	lr
  ldr r3, =_sidata
 80028ec:	080029f4 	.word	0x080029f4
  ldr r0, =_sdata
 80028f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80028f4:	200000d0 	.word	0x200000d0
  ldr r2, =_sbss
 80028f8:	200000d0 	.word	0x200000d0
  ldr r3, = _ebss
 80028fc:	20000f4c 	.word	0x20000f4c

08002900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002900:	e7fe      	b.n	8002900 <ADC1_2_IRQHandler>
	...

08002904 <__libc_init_array>:
 8002904:	b570      	push	{r4, r5, r6, lr}
 8002906:	2500      	movs	r5, #0
 8002908:	4e0c      	ldr	r6, [pc, #48]	; (800293c <__libc_init_array+0x38>)
 800290a:	4c0d      	ldr	r4, [pc, #52]	; (8002940 <__libc_init_array+0x3c>)
 800290c:	1ba4      	subs	r4, r4, r6
 800290e:	10a4      	asrs	r4, r4, #2
 8002910:	42a5      	cmp	r5, r4
 8002912:	d109      	bne.n	8002928 <__libc_init_array+0x24>
 8002914:	f000 f81a 	bl	800294c <_init>
 8002918:	2500      	movs	r5, #0
 800291a:	4e0a      	ldr	r6, [pc, #40]	; (8002944 <__libc_init_array+0x40>)
 800291c:	4c0a      	ldr	r4, [pc, #40]	; (8002948 <__libc_init_array+0x44>)
 800291e:	1ba4      	subs	r4, r4, r6
 8002920:	10a4      	asrs	r4, r4, #2
 8002922:	42a5      	cmp	r5, r4
 8002924:	d105      	bne.n	8002932 <__libc_init_array+0x2e>
 8002926:	bd70      	pop	{r4, r5, r6, pc}
 8002928:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800292c:	4798      	blx	r3
 800292e:	3501      	adds	r5, #1
 8002930:	e7ee      	b.n	8002910 <__libc_init_array+0xc>
 8002932:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002936:	4798      	blx	r3
 8002938:	3501      	adds	r5, #1
 800293a:	e7f2      	b.n	8002922 <__libc_init_array+0x1e>
 800293c:	080029ec 	.word	0x080029ec
 8002940:	080029ec 	.word	0x080029ec
 8002944:	080029ec 	.word	0x080029ec
 8002948:	080029f0 	.word	0x080029f0

0800294c <_init>:
 800294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294e:	bf00      	nop
 8002950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002952:	bc08      	pop	{r3}
 8002954:	469e      	mov	lr, r3
 8002956:	4770      	bx	lr

08002958 <_fini>:
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	bf00      	nop
 800295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295e:	bc08      	pop	{r3}
 8002960:	469e      	mov	lr, r3
 8002962:	4770      	bx	lr
